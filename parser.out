Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> program ID PYC varsaux paux2 mainfunction end PYC
Rule 2     programa -> program ID PYC empty mainfunction end PYC
Rule 3     varsaux -> vars varsaux
Rule 4     varsaux -> empty
Rule 5     paux2 -> function paux2
Rule 6     paux2 -> empty
Rule 7     vars -> var type vaux PYC
Rule 8     vars -> empty
Rule 9     vaux -> ID nextvar
Rule 10    vaux -> ID CORIZQ CTEINT CORDER nextvar
Rule 11    vaux -> ID CORIZQ CTEINT COMA CTEINT CORDER nextvar
Rule 12    nextvar -> COMA vaux
Rule 13    nextvar -> empty
Rule 14    mainfunction -> func main PARIZQ PARDER varsaux bloque
Rule 15    mainfunction -> func main PARIZQ PARDER bloque
Rule 16    bloque -> LLAVEIZQ bloqueaux LLAVEDER
Rule 17    bloque -> LLAVEIZQ empty LLAVEDER
Rule 18    bloqueaux -> estatuto bloqueaux
Rule 19    bloqueaux -> estatuto
Rule 20    type -> int
Rule 21    type -> float
Rule 22    type -> string
Rule 23    type -> bool
Rule 24    function -> ftype func ID PARIZQ funcaux PARDER varsaux bloque
Rule 25    function -> ftype func ID PARIZQ empty PARDER varsaux bloque
Rule 26    ftype -> type
Rule 27    ftype -> void
Rule 28    funcaux -> type ID
Rule 29    funcaux -> type ID COMA funcaux
Rule 30    estatuto -> asignacion
Rule 31    estatuto -> escritura
Rule 32    estatuto -> llamada
Rule 33    estatuto -> condicion
Rule 34    estatuto -> whileloop
Rule 35    estatuto -> forloop
Rule 36    estatuto -> lectura
Rule 37    asignacion -> ID asignaux ASIGNA hyper_exp PYC
Rule 38    asignacion -> ID asignaux ASIGNA llamada_esp PYC
Rule 39    asignaux -> CORIZQ expresion CORDER
Rule 40    asignaux -> CORIZQ expresion COMA expresion CORDER
Rule 41    asignaux -> empty
Rule 42    escritura -> write PARIZQ escaux PARDER PYC
Rule 43    escaux -> expresion nextexp
Rule 44    escaux -> CTESTRING nextexp
Rule 45    escaux -> llamada_esp nextexp
Rule 46    nextexp -> COMA escaux
Rule 47    nextexp -> empty
Rule 48    llamada -> ID PARIZQ expresion llamaux PARDER
Rule 49    llamada -> ID PARIZQ llamada_esp llamaux PARDER
Rule 50    llamada -> ID PARIZQ PARDER
Rule 51    llamaux -> expresion nextparametro
Rule 52    llamaux -> llamada_esp nextparametro
Rule 53    nextparametro -> COMA llamaux
Rule 54    nextparametro -> empty
Rule 55    condicion -> if PARIZQ expresion PARDER bloque
Rule 56    condicion -> if PARIZQ expresion PARDER bloque else bloque
Rule 57    whileloop -> while PARIZQ expresion PARDER bloque
Rule 58    forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque
Rule 59    lectura -> read PARIZQ ID PARDER PYC
Rule 60    expresion -> term
Rule 61    expresion -> term MAS term
Rule 62    expresion -> term MENOS term
Rule 63    term -> fact
Rule 64    term -> fact MULT fact
Rule 65    term -> fact DIV fact
Rule 66    fact -> CTEINT
Rule 67    fact -> CTEFLOAT
Rule 68    fact -> ID
Rule 69    fact -> hyper_exp
Rule 70    hyper_exp -> super_exp
Rule 71    hyper_exp -> super_exp AND super_exp
Rule 72    hyper_exp -> super_exp OR super_exp
Rule 73    super_exp -> expresion
Rule 74    super_exp -> expresion MAYORQUE expresion
Rule 75    super_exp -> expresion MENORQUE expresion
Rule 76    super_exp -> expresion EQUALS expresion
Rule 77    super_exp -> expresion DIFERENTE expresion
Rule 78    llamada_esp -> ID PUNTO especiales PARIZQ PARDER
Rule 79    especiales -> length
Rule 80    especiales -> max
Rule 81    especiales -> min
Rule 82    especiales -> avg
Rule 83    especiales -> median
Rule 84    especiales -> mode
Rule 85    especiales -> variance
Rule 86    especiales -> stdev
Rule 87    empty -> <empty>

Terminals, with rules where they appear

AND                  : 71
ASIGNA               : 37 38
COMA                 : 11 12 29 40 46 53
CORDER               : 10 11 39 40
CORIZQ               : 10 11 39 40
CTEFLOAT             : 67
CTEINT               : 10 11 11 66
CTESTRING            : 44
DIFERENTE            : 77
DIV                  : 65
DOSPUNTOS            : 58
EQUALS               : 76
ID                   : 1 2 9 10 11 24 25 28 29 37 38 48 49 50 59 68 78
LLAVEDER             : 16 17
LLAVEIZQ             : 16 17
MAS                  : 61
MAYORQUE             : 74
MENORQUE             : 75
MENOS                : 62
MULT                 : 64
OR                   : 72
PARDER               : 14 15 24 25 42 48 49 50 55 56 57 58 59 78
PARIZQ               : 14 15 24 25 42 48 49 50 55 56 57 58 59 78
PUNTO                : 78
PYC                  : 1 1 2 2 7 37 38 42 59
avg                  : 82
bool                 : 23
else                 : 56
end                  : 1 2
error                : 
float                : 21
for                  : 58
func                 : 14 15 24 25
if                   : 55 56
int                  : 20
length               : 79
main                 : 14 15
max                  : 80
median               : 83
min                  : 81
mode                 : 84
program              : 1 2
read                 : 59
stdev                : 86
string               : 22
var                  : 7
variance             : 85
void                 : 27
while                : 57
write                : 42

Nonterminals, with rules where they appear

asignacion           : 30
asignaux             : 37 38
bloque               : 14 15 24 25 55 56 56 57 58
bloqueaux            : 16 18
condicion            : 33
empty                : 2 4 6 8 13 17 25 41 47 54
escaux               : 42 46
escritura            : 31
especiales           : 78
estatuto             : 18 19
expresion            : 39 40 40 43 48 51 55 56 57 58 58 73 74 74 75 75 76 76 77 77
fact                 : 63 64 64 65 65
forloop              : 35
ftype                : 24 25
funcaux              : 24 29
function             : 5
hyper_exp            : 37 69
lectura              : 36
llamada              : 32
llamada_esp          : 38 45 49 52
llamaux              : 48 49 53
mainfunction         : 1 2
nextexp              : 43 44 45
nextparametro        : 51 52
nextvar              : 9 10 11
paux2                : 1 5
programa             : 0
super_exp            : 70 71 71 72 72
term                 : 60 61 61 62 62
type                 : 7 26 28 29
vars                 : 3
varsaux              : 1 3 14 24 25
vaux                 : 7 12
whileloop            : 34

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . program ID PYC varsaux paux2 mainfunction end PYC
    (2) programa -> . program ID PYC empty mainfunction end PYC

    program         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> program . ID PYC varsaux paux2 mainfunction end PYC
    (2) programa -> program . ID PYC empty mainfunction end PYC

    ID              shift and go to state 3


state 3

    (1) programa -> program ID . PYC varsaux paux2 mainfunction end PYC
    (2) programa -> program ID . PYC empty mainfunction end PYC

    PYC             shift and go to state 4


state 4

    (1) programa -> program ID PYC . varsaux paux2 mainfunction end PYC
    (2) programa -> program ID PYC . empty mainfunction end PYC
    (3) varsaux -> . vars varsaux
    (4) varsaux -> . empty
    (87) empty -> .
    (7) vars -> . var type vaux PYC
    (8) vars -> . empty

  ! shift/reduce conflict for var resolved as shift
    func            reduce using rule 87 (empty -> .)
    void            reduce using rule 87 (empty -> .)
    int             reduce using rule 87 (empty -> .)
    float           reduce using rule 87 (empty -> .)
    string          reduce using rule 87 (empty -> .)
    bool            reduce using rule 87 (empty -> .)
    var             shift and go to state 8

  ! var             [ reduce using rule 87 (empty -> .) ]

    varsaux                        shift and go to state 5
    empty                          shift and go to state 6
    vars                           shift and go to state 7

state 5

    (1) programa -> program ID PYC varsaux . paux2 mainfunction end PYC
    (5) paux2 -> . function paux2
    (6) paux2 -> . empty
    (24) function -> . ftype func ID PARIZQ funcaux PARDER varsaux bloque
    (25) function -> . ftype func ID PARIZQ empty PARDER varsaux bloque
    (87) empty -> .
    (26) ftype -> . type
    (27) ftype -> . void
    (20) type -> . int
    (21) type -> . float
    (22) type -> . string
    (23) type -> . bool

    func            reduce using rule 87 (empty -> .)
    void            shift and go to state 14
    int             shift and go to state 15
    float           shift and go to state 16
    string          shift and go to state 17
    bool            shift and go to state 18

    paux2                          shift and go to state 9
    function                       shift and go to state 10
    empty                          shift and go to state 11
    ftype                          shift and go to state 12
    type                           shift and go to state 13

state 6

    (2) programa -> program ID PYC empty . mainfunction end PYC
    (4) varsaux -> empty .
    (8) vars -> empty .
    (14) mainfunction -> . func main PARIZQ PARDER varsaux bloque
    (15) mainfunction -> . func main PARIZQ PARDER bloque

  ! reduce/reduce conflict for void resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for int resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for float resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for string resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for bool resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for func resolved using rule 4 (varsaux -> empty .)
  ! shift/reduce conflict for func resolved as shift
    void            reduce using rule 4 (varsaux -> empty .)
    int             reduce using rule 4 (varsaux -> empty .)
    float           reduce using rule 4 (varsaux -> empty .)
    string          reduce using rule 4 (varsaux -> empty .)
    bool            reduce using rule 4 (varsaux -> empty .)
    var             reduce using rule 8 (vars -> empty .)
    func            shift and go to state 20

  ! func            [ reduce using rule 4 (varsaux -> empty .) ]
  ! void            [ reduce using rule 8 (vars -> empty .) ]
  ! int             [ reduce using rule 8 (vars -> empty .) ]
  ! float           [ reduce using rule 8 (vars -> empty .) ]
  ! string          [ reduce using rule 8 (vars -> empty .) ]
  ! bool            [ reduce using rule 8 (vars -> empty .) ]
  ! func            [ reduce using rule 8 (vars -> empty .) ]

    mainfunction                   shift and go to state 19

state 7

    (3) varsaux -> vars . varsaux
    (3) varsaux -> . vars varsaux
    (4) varsaux -> . empty
    (7) vars -> . var type vaux PYC
    (8) vars -> . empty
    (87) empty -> .

  ! shift/reduce conflict for var resolved as shift
    var             shift and go to state 8
    void            reduce using rule 87 (empty -> .)
    int             reduce using rule 87 (empty -> .)
    float           reduce using rule 87 (empty -> .)
    string          reduce using rule 87 (empty -> .)
    bool            reduce using rule 87 (empty -> .)
    func            reduce using rule 87 (empty -> .)
    LLAVEIZQ        reduce using rule 87 (empty -> .)

  ! var             [ reduce using rule 87 (empty -> .) ]

    vars                           shift and go to state 7
    varsaux                        shift and go to state 21
    empty                          shift and go to state 22

state 8

    (7) vars -> var . type vaux PYC
    (20) type -> . int
    (21) type -> . float
    (22) type -> . string
    (23) type -> . bool

    int             shift and go to state 15
    float           shift and go to state 16
    string          shift and go to state 17
    bool            shift and go to state 18

    type                           shift and go to state 23

state 9

    (1) programa -> program ID PYC varsaux paux2 . mainfunction end PYC
    (14) mainfunction -> . func main PARIZQ PARDER varsaux bloque
    (15) mainfunction -> . func main PARIZQ PARDER bloque

    func            shift and go to state 20

    mainfunction                   shift and go to state 24

state 10

    (5) paux2 -> function . paux2
    (5) paux2 -> . function paux2
    (6) paux2 -> . empty
    (24) function -> . ftype func ID PARIZQ funcaux PARDER varsaux bloque
    (25) function -> . ftype func ID PARIZQ empty PARDER varsaux bloque
    (87) empty -> .
    (26) ftype -> . type
    (27) ftype -> . void
    (20) type -> . int
    (21) type -> . float
    (22) type -> . string
    (23) type -> . bool

    func            reduce using rule 87 (empty -> .)
    void            shift and go to state 14
    int             shift and go to state 15
    float           shift and go to state 16
    string          shift and go to state 17
    bool            shift and go to state 18

    function                       shift and go to state 10
    paux2                          shift and go to state 25
    empty                          shift and go to state 11
    ftype                          shift and go to state 12
    type                           shift and go to state 13

state 11

    (6) paux2 -> empty .

    func            reduce using rule 6 (paux2 -> empty .)


state 12

    (24) function -> ftype . func ID PARIZQ funcaux PARDER varsaux bloque
    (25) function -> ftype . func ID PARIZQ empty PARDER varsaux bloque

    func            shift and go to state 26


state 13

    (26) ftype -> type .

    func            reduce using rule 26 (ftype -> type .)


state 14

    (27) ftype -> void .

    func            reduce using rule 27 (ftype -> void .)


state 15

    (20) type -> int .

    func            reduce using rule 20 (type -> int .)
    ID              reduce using rule 20 (type -> int .)


state 16

    (21) type -> float .

    func            reduce using rule 21 (type -> float .)
    ID              reduce using rule 21 (type -> float .)


state 17

    (22) type -> string .

    func            reduce using rule 22 (type -> string .)
    ID              reduce using rule 22 (type -> string .)


state 18

    (23) type -> bool .

    func            reduce using rule 23 (type -> bool .)
    ID              reduce using rule 23 (type -> bool .)


state 19

    (2) programa -> program ID PYC empty mainfunction . end PYC

    end             shift and go to state 27


state 20

    (14) mainfunction -> func . main PARIZQ PARDER varsaux bloque
    (15) mainfunction -> func . main PARIZQ PARDER bloque

    main            shift and go to state 28


state 21

    (3) varsaux -> vars varsaux .

    void            reduce using rule 3 (varsaux -> vars varsaux .)
    int             reduce using rule 3 (varsaux -> vars varsaux .)
    float           reduce using rule 3 (varsaux -> vars varsaux .)
    string          reduce using rule 3 (varsaux -> vars varsaux .)
    bool            reduce using rule 3 (varsaux -> vars varsaux .)
    func            reduce using rule 3 (varsaux -> vars varsaux .)
    LLAVEIZQ        reduce using rule 3 (varsaux -> vars varsaux .)


state 22

    (4) varsaux -> empty .
    (8) vars -> empty .

  ! reduce/reduce conflict for void resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for int resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for float resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for string resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for bool resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for func resolved using rule 4 (varsaux -> empty .)
  ! reduce/reduce conflict for LLAVEIZQ resolved using rule 4 (varsaux -> empty .)
    void            reduce using rule 4 (varsaux -> empty .)
    int             reduce using rule 4 (varsaux -> empty .)
    float           reduce using rule 4 (varsaux -> empty .)
    string          reduce using rule 4 (varsaux -> empty .)
    bool            reduce using rule 4 (varsaux -> empty .)
    func            reduce using rule 4 (varsaux -> empty .)
    LLAVEIZQ        reduce using rule 4 (varsaux -> empty .)
    var             reduce using rule 8 (vars -> empty .)

  ! void            [ reduce using rule 8 (vars -> empty .) ]
  ! int             [ reduce using rule 8 (vars -> empty .) ]
  ! float           [ reduce using rule 8 (vars -> empty .) ]
  ! string          [ reduce using rule 8 (vars -> empty .) ]
  ! bool            [ reduce using rule 8 (vars -> empty .) ]
  ! func            [ reduce using rule 8 (vars -> empty .) ]
  ! LLAVEIZQ        [ reduce using rule 8 (vars -> empty .) ]


state 23

    (7) vars -> var type . vaux PYC
    (9) vaux -> . ID nextvar
    (10) vaux -> . ID CORIZQ CTEINT CORDER nextvar
    (11) vaux -> . ID CORIZQ CTEINT COMA CTEINT CORDER nextvar

    ID              shift and go to state 30

    vaux                           shift and go to state 29

state 24

    (1) programa -> program ID PYC varsaux paux2 mainfunction . end PYC

    end             shift and go to state 31


state 25

    (5) paux2 -> function paux2 .

    func            reduce using rule 5 (paux2 -> function paux2 .)


state 26

    (24) function -> ftype func . ID PARIZQ funcaux PARDER varsaux bloque
    (25) function -> ftype func . ID PARIZQ empty PARDER varsaux bloque

    ID              shift and go to state 32


state 27

    (2) programa -> program ID PYC empty mainfunction end . PYC

    PYC             shift and go to state 33


state 28

    (14) mainfunction -> func main . PARIZQ PARDER varsaux bloque
    (15) mainfunction -> func main . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 34


state 29

    (7) vars -> var type vaux . PYC

    PYC             shift and go to state 35


state 30

    (9) vaux -> ID . nextvar
    (10) vaux -> ID . CORIZQ CTEINT CORDER nextvar
    (11) vaux -> ID . CORIZQ CTEINT COMA CTEINT CORDER nextvar
    (12) nextvar -> . COMA vaux
    (13) nextvar -> . empty
    (87) empty -> .

    CORIZQ          shift and go to state 37
    COMA            shift and go to state 38
    PYC             reduce using rule 87 (empty -> .)

    nextvar                        shift and go to state 36
    empty                          shift and go to state 39

state 31

    (1) programa -> program ID PYC varsaux paux2 mainfunction end . PYC

    PYC             shift and go to state 40


state 32

    (24) function -> ftype func ID . PARIZQ funcaux PARDER varsaux bloque
    (25) function -> ftype func ID . PARIZQ empty PARDER varsaux bloque

    PARIZQ          shift and go to state 41


state 33

    (2) programa -> program ID PYC empty mainfunction end PYC .

    $end            reduce using rule 2 (programa -> program ID PYC empty mainfunction end PYC .)


state 34

    (14) mainfunction -> func main PARIZQ . PARDER varsaux bloque
    (15) mainfunction -> func main PARIZQ . PARDER bloque

    PARDER          shift and go to state 42


state 35

    (7) vars -> var type vaux PYC .

    var             reduce using rule 7 (vars -> var type vaux PYC .)
    void            reduce using rule 7 (vars -> var type vaux PYC .)
    int             reduce using rule 7 (vars -> var type vaux PYC .)
    float           reduce using rule 7 (vars -> var type vaux PYC .)
    string          reduce using rule 7 (vars -> var type vaux PYC .)
    bool            reduce using rule 7 (vars -> var type vaux PYC .)
    func            reduce using rule 7 (vars -> var type vaux PYC .)
    LLAVEIZQ        reduce using rule 7 (vars -> var type vaux PYC .)


state 36

    (9) vaux -> ID nextvar .

    PYC             reduce using rule 9 (vaux -> ID nextvar .)


state 37

    (10) vaux -> ID CORIZQ . CTEINT CORDER nextvar
    (11) vaux -> ID CORIZQ . CTEINT COMA CTEINT CORDER nextvar

    CTEINT          shift and go to state 43


state 38

    (12) nextvar -> COMA . vaux
    (9) vaux -> . ID nextvar
    (10) vaux -> . ID CORIZQ CTEINT CORDER nextvar
    (11) vaux -> . ID CORIZQ CTEINT COMA CTEINT CORDER nextvar

    ID              shift and go to state 30

    vaux                           shift and go to state 44

state 39

    (13) nextvar -> empty .

    PYC             reduce using rule 13 (nextvar -> empty .)


state 40

    (1) programa -> program ID PYC varsaux paux2 mainfunction end PYC .

    $end            reduce using rule 1 (programa -> program ID PYC varsaux paux2 mainfunction end PYC .)


state 41

    (24) function -> ftype func ID PARIZQ . funcaux PARDER varsaux bloque
    (25) function -> ftype func ID PARIZQ . empty PARDER varsaux bloque
    (28) funcaux -> . type ID
    (29) funcaux -> . type ID COMA funcaux
    (87) empty -> .
    (20) type -> . int
    (21) type -> . float
    (22) type -> . string
    (23) type -> . bool

    PARDER          reduce using rule 87 (empty -> .)
    int             shift and go to state 15
    float           shift and go to state 16
    string          shift and go to state 17
    bool            shift and go to state 18

    funcaux                        shift and go to state 45
    empty                          shift and go to state 46
    type                           shift and go to state 47

state 42

    (14) mainfunction -> func main PARIZQ PARDER . varsaux bloque
    (15) mainfunction -> func main PARIZQ PARDER . bloque
    (3) varsaux -> . vars varsaux
    (4) varsaux -> . empty
    (16) bloque -> . LLAVEIZQ bloqueaux LLAVEDER
    (17) bloque -> . LLAVEIZQ empty LLAVEDER
    (7) vars -> . var type vaux PYC
    (8) vars -> . empty
    (87) empty -> .

  ! shift/reduce conflict for LLAVEIZQ resolved as shift
  ! shift/reduce conflict for var resolved as shift
    LLAVEIZQ        shift and go to state 50
    var             shift and go to state 8

  ! LLAVEIZQ        [ reduce using rule 87 (empty -> .) ]
  ! var             [ reduce using rule 87 (empty -> .) ]

    varsaux                        shift and go to state 48
    bloque                         shift and go to state 49
    vars                           shift and go to state 7
    empty                          shift and go to state 22

state 43

    (10) vaux -> ID CORIZQ CTEINT . CORDER nextvar
    (11) vaux -> ID CORIZQ CTEINT . COMA CTEINT CORDER nextvar

    CORDER          shift and go to state 51
    COMA            shift and go to state 52


state 44

    (12) nextvar -> COMA vaux .

    PYC             reduce using rule 12 (nextvar -> COMA vaux .)


state 45

    (24) function -> ftype func ID PARIZQ funcaux . PARDER varsaux bloque

    PARDER          shift and go to state 53


state 46

    (25) function -> ftype func ID PARIZQ empty . PARDER varsaux bloque

    PARDER          shift and go to state 54


state 47

    (28) funcaux -> type . ID
    (29) funcaux -> type . ID COMA funcaux

    ID              shift and go to state 55


state 48

    (14) mainfunction -> func main PARIZQ PARDER varsaux . bloque
    (16) bloque -> . LLAVEIZQ bloqueaux LLAVEDER
    (17) bloque -> . LLAVEIZQ empty LLAVEDER

    LLAVEIZQ        shift and go to state 50

    bloque                         shift and go to state 56

state 49

    (15) mainfunction -> func main PARIZQ PARDER bloque .

    end             reduce using rule 15 (mainfunction -> func main PARIZQ PARDER bloque .)


state 50

    (16) bloque -> LLAVEIZQ . bloqueaux LLAVEDER
    (17) bloque -> LLAVEIZQ . empty LLAVEDER
    (18) bloqueaux -> . estatuto bloqueaux
    (19) bloqueaux -> . estatuto
    (87) empty -> .
    (30) estatuto -> . asignacion
    (31) estatuto -> . escritura
    (32) estatuto -> . llamada
    (33) estatuto -> . condicion
    (34) estatuto -> . whileloop
    (35) estatuto -> . forloop
    (36) estatuto -> . lectura
    (37) asignacion -> . ID asignaux ASIGNA hyper_exp PYC
    (38) asignacion -> . ID asignaux ASIGNA llamada_esp PYC
    (42) escritura -> . write PARIZQ escaux PARDER PYC
    (48) llamada -> . ID PARIZQ expresion llamaux PARDER
    (49) llamada -> . ID PARIZQ llamada_esp llamaux PARDER
    (50) llamada -> . ID PARIZQ PARDER
    (55) condicion -> . if PARIZQ expresion PARDER bloque
    (56) condicion -> . if PARIZQ expresion PARDER bloque else bloque
    (57) whileloop -> . while PARIZQ expresion PARDER bloque
    (58) forloop -> . for PARIZQ expresion DOSPUNTOS expresion PARDER bloque
    (59) lectura -> . read PARIZQ ID PARDER PYC

    LLAVEDER        reduce using rule 87 (empty -> .)
    ID              shift and go to state 67
    write           shift and go to state 68
    if              shift and go to state 69
    while           shift and go to state 70
    for             shift and go to state 71
    read            shift and go to state 72

    bloqueaux                      shift and go to state 57
    empty                          shift and go to state 58
    estatuto                       shift and go to state 59
    asignacion                     shift and go to state 60
    escritura                      shift and go to state 61
    llamada                        shift and go to state 62
    condicion                      shift and go to state 63
    whileloop                      shift and go to state 64
    forloop                        shift and go to state 65
    lectura                        shift and go to state 66

state 51

    (10) vaux -> ID CORIZQ CTEINT CORDER . nextvar
    (12) nextvar -> . COMA vaux
    (13) nextvar -> . empty
    (87) empty -> .

    COMA            shift and go to state 38
    PYC             reduce using rule 87 (empty -> .)

    nextvar                        shift and go to state 73
    empty                          shift and go to state 39

state 52

    (11) vaux -> ID CORIZQ CTEINT COMA . CTEINT CORDER nextvar

    CTEINT          shift and go to state 74


state 53

    (24) function -> ftype func ID PARIZQ funcaux PARDER . varsaux bloque
    (3) varsaux -> . vars varsaux
    (4) varsaux -> . empty
    (7) vars -> . var type vaux PYC
    (8) vars -> . empty
    (87) empty -> .

  ! shift/reduce conflict for var resolved as shift
    var             shift and go to state 8
    LLAVEIZQ        reduce using rule 87 (empty -> .)

  ! var             [ reduce using rule 87 (empty -> .) ]

    varsaux                        shift and go to state 75
    vars                           shift and go to state 7
    empty                          shift and go to state 22

state 54

    (25) function -> ftype func ID PARIZQ empty PARDER . varsaux bloque
    (3) varsaux -> . vars varsaux
    (4) varsaux -> . empty
    (7) vars -> . var type vaux PYC
    (8) vars -> . empty
    (87) empty -> .

  ! shift/reduce conflict for var resolved as shift
    var             shift and go to state 8
    LLAVEIZQ        reduce using rule 87 (empty -> .)

  ! var             [ reduce using rule 87 (empty -> .) ]

    empty                          shift and go to state 22
    varsaux                        shift and go to state 76
    vars                           shift and go to state 7

state 55

    (28) funcaux -> type ID .
    (29) funcaux -> type ID . COMA funcaux

    PARDER          reduce using rule 28 (funcaux -> type ID .)
    COMA            shift and go to state 77


state 56

    (14) mainfunction -> func main PARIZQ PARDER varsaux bloque .

    end             reduce using rule 14 (mainfunction -> func main PARIZQ PARDER varsaux bloque .)


state 57

    (16) bloque -> LLAVEIZQ bloqueaux . LLAVEDER

    LLAVEDER        shift and go to state 78


state 58

    (17) bloque -> LLAVEIZQ empty . LLAVEDER

    LLAVEDER        shift and go to state 79


state 59

    (18) bloqueaux -> estatuto . bloqueaux
    (19) bloqueaux -> estatuto .
    (18) bloqueaux -> . estatuto bloqueaux
    (19) bloqueaux -> . estatuto
    (30) estatuto -> . asignacion
    (31) estatuto -> . escritura
    (32) estatuto -> . llamada
    (33) estatuto -> . condicion
    (34) estatuto -> . whileloop
    (35) estatuto -> . forloop
    (36) estatuto -> . lectura
    (37) asignacion -> . ID asignaux ASIGNA hyper_exp PYC
    (38) asignacion -> . ID asignaux ASIGNA llamada_esp PYC
    (42) escritura -> . write PARIZQ escaux PARDER PYC
    (48) llamada -> . ID PARIZQ expresion llamaux PARDER
    (49) llamada -> . ID PARIZQ llamada_esp llamaux PARDER
    (50) llamada -> . ID PARIZQ PARDER
    (55) condicion -> . if PARIZQ expresion PARDER bloque
    (56) condicion -> . if PARIZQ expresion PARDER bloque else bloque
    (57) whileloop -> . while PARIZQ expresion PARDER bloque
    (58) forloop -> . for PARIZQ expresion DOSPUNTOS expresion PARDER bloque
    (59) lectura -> . read PARIZQ ID PARDER PYC

    LLAVEDER        reduce using rule 19 (bloqueaux -> estatuto .)
    ID              shift and go to state 67
    write           shift and go to state 68
    if              shift and go to state 69
    while           shift and go to state 70
    for             shift and go to state 71
    read            shift and go to state 72

    estatuto                       shift and go to state 59
    bloqueaux                      shift and go to state 80
    asignacion                     shift and go to state 60
    escritura                      shift and go to state 61
    llamada                        shift and go to state 62
    condicion                      shift and go to state 63
    whileloop                      shift and go to state 64
    forloop                        shift and go to state 65
    lectura                        shift and go to state 66

state 60

    (30) estatuto -> asignacion .

    ID              reduce using rule 30 (estatuto -> asignacion .)
    write           reduce using rule 30 (estatuto -> asignacion .)
    if              reduce using rule 30 (estatuto -> asignacion .)
    while           reduce using rule 30 (estatuto -> asignacion .)
    for             reduce using rule 30 (estatuto -> asignacion .)
    read            reduce using rule 30 (estatuto -> asignacion .)
    LLAVEDER        reduce using rule 30 (estatuto -> asignacion .)


state 61

    (31) estatuto -> escritura .

    ID              reduce using rule 31 (estatuto -> escritura .)
    write           reduce using rule 31 (estatuto -> escritura .)
    if              reduce using rule 31 (estatuto -> escritura .)
    while           reduce using rule 31 (estatuto -> escritura .)
    for             reduce using rule 31 (estatuto -> escritura .)
    read            reduce using rule 31 (estatuto -> escritura .)
    LLAVEDER        reduce using rule 31 (estatuto -> escritura .)


state 62

    (32) estatuto -> llamada .

    ID              reduce using rule 32 (estatuto -> llamada .)
    write           reduce using rule 32 (estatuto -> llamada .)
    if              reduce using rule 32 (estatuto -> llamada .)
    while           reduce using rule 32 (estatuto -> llamada .)
    for             reduce using rule 32 (estatuto -> llamada .)
    read            reduce using rule 32 (estatuto -> llamada .)
    LLAVEDER        reduce using rule 32 (estatuto -> llamada .)


state 63

    (33) estatuto -> condicion .

    ID              reduce using rule 33 (estatuto -> condicion .)
    write           reduce using rule 33 (estatuto -> condicion .)
    if              reduce using rule 33 (estatuto -> condicion .)
    while           reduce using rule 33 (estatuto -> condicion .)
    for             reduce using rule 33 (estatuto -> condicion .)
    read            reduce using rule 33 (estatuto -> condicion .)
    LLAVEDER        reduce using rule 33 (estatuto -> condicion .)


state 64

    (34) estatuto -> whileloop .

    ID              reduce using rule 34 (estatuto -> whileloop .)
    write           reduce using rule 34 (estatuto -> whileloop .)
    if              reduce using rule 34 (estatuto -> whileloop .)
    while           reduce using rule 34 (estatuto -> whileloop .)
    for             reduce using rule 34 (estatuto -> whileloop .)
    read            reduce using rule 34 (estatuto -> whileloop .)
    LLAVEDER        reduce using rule 34 (estatuto -> whileloop .)


state 65

    (35) estatuto -> forloop .

    ID              reduce using rule 35 (estatuto -> forloop .)
    write           reduce using rule 35 (estatuto -> forloop .)
    if              reduce using rule 35 (estatuto -> forloop .)
    while           reduce using rule 35 (estatuto -> forloop .)
    for             reduce using rule 35 (estatuto -> forloop .)
    read            reduce using rule 35 (estatuto -> forloop .)
    LLAVEDER        reduce using rule 35 (estatuto -> forloop .)


state 66

    (36) estatuto -> lectura .

    ID              reduce using rule 36 (estatuto -> lectura .)
    write           reduce using rule 36 (estatuto -> lectura .)
    if              reduce using rule 36 (estatuto -> lectura .)
    while           reduce using rule 36 (estatuto -> lectura .)
    for             reduce using rule 36 (estatuto -> lectura .)
    read            reduce using rule 36 (estatuto -> lectura .)
    LLAVEDER        reduce using rule 36 (estatuto -> lectura .)


state 67

    (37) asignacion -> ID . asignaux ASIGNA hyper_exp PYC
    (38) asignacion -> ID . asignaux ASIGNA llamada_esp PYC
    (48) llamada -> ID . PARIZQ expresion llamaux PARDER
    (49) llamada -> ID . PARIZQ llamada_esp llamaux PARDER
    (50) llamada -> ID . PARIZQ PARDER
    (39) asignaux -> . CORIZQ expresion CORDER
    (40) asignaux -> . CORIZQ expresion COMA expresion CORDER
    (41) asignaux -> . empty
    (87) empty -> .

    PARIZQ          shift and go to state 82
    CORIZQ          shift and go to state 83
    ASIGNA          reduce using rule 87 (empty -> .)

    asignaux                       shift and go to state 81
    empty                          shift and go to state 84

state 68

    (42) escritura -> write . PARIZQ escaux PARDER PYC

    PARIZQ          shift and go to state 85


state 69

    (55) condicion -> if . PARIZQ expresion PARDER bloque
    (56) condicion -> if . PARIZQ expresion PARDER bloque else bloque

    PARIZQ          shift and go to state 86


state 70

    (57) whileloop -> while . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 87


state 71

    (58) forloop -> for . PARIZQ expresion DOSPUNTOS expresion PARDER bloque

    PARIZQ          shift and go to state 88


state 72

    (59) lectura -> read . PARIZQ ID PARDER PYC

    PARIZQ          shift and go to state 89


state 73

    (10) vaux -> ID CORIZQ CTEINT CORDER nextvar .

    PYC             reduce using rule 10 (vaux -> ID CORIZQ CTEINT CORDER nextvar .)


state 74

    (11) vaux -> ID CORIZQ CTEINT COMA CTEINT . CORDER nextvar

    CORDER          shift and go to state 90


state 75

    (24) function -> ftype func ID PARIZQ funcaux PARDER varsaux . bloque
    (16) bloque -> . LLAVEIZQ bloqueaux LLAVEDER
    (17) bloque -> . LLAVEIZQ empty LLAVEDER

    LLAVEIZQ        shift and go to state 50

    bloque                         shift and go to state 91

state 76

    (25) function -> ftype func ID PARIZQ empty PARDER varsaux . bloque
    (16) bloque -> . LLAVEIZQ bloqueaux LLAVEDER
    (17) bloque -> . LLAVEIZQ empty LLAVEDER

    LLAVEIZQ        shift and go to state 50

    bloque                         shift and go to state 92

state 77

    (29) funcaux -> type ID COMA . funcaux
    (28) funcaux -> . type ID
    (29) funcaux -> . type ID COMA funcaux
    (20) type -> . int
    (21) type -> . float
    (22) type -> . string
    (23) type -> . bool

    int             shift and go to state 15
    float           shift and go to state 16
    string          shift and go to state 17
    bool            shift and go to state 18

    type                           shift and go to state 47
    funcaux                        shift and go to state 93

state 78

    (16) bloque -> LLAVEIZQ bloqueaux LLAVEDER .

    end             reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    void            reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    int             reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    float           reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    string          reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    bool            reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    func            reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    else            reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    ID              reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    write           reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    if              reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    while           reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    for             reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    read            reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)
    LLAVEDER        reduce using rule 16 (bloque -> LLAVEIZQ bloqueaux LLAVEDER .)


state 79

    (17) bloque -> LLAVEIZQ empty LLAVEDER .

    end             reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    void            reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    int             reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    float           reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    string          reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    bool            reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    func            reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    else            reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    ID              reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    write           reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    if              reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    while           reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    for             reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    read            reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)
    LLAVEDER        reduce using rule 17 (bloque -> LLAVEIZQ empty LLAVEDER .)


state 80

    (18) bloqueaux -> estatuto bloqueaux .

    LLAVEDER        reduce using rule 18 (bloqueaux -> estatuto bloqueaux .)


state 81

    (37) asignacion -> ID asignaux . ASIGNA hyper_exp PYC
    (38) asignacion -> ID asignaux . ASIGNA llamada_esp PYC

    ASIGNA          shift and go to state 94


state 82

    (48) llamada -> ID PARIZQ . expresion llamaux PARDER
    (49) llamada -> ID PARIZQ . llamada_esp llamaux PARDER
    (50) llamada -> ID PARIZQ . PARDER
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (78) llamada_esp -> . ID PUNTO especiales PARIZQ PARDER
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    PARDER          shift and go to state 97
    ID              shift and go to state 95
    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102

    expresion                      shift and go to state 96
    llamada_esp                    shift and go to state 98
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 83

    (39) asignaux -> CORIZQ . expresion CORDER
    (40) asignaux -> CORIZQ . expresion COMA expresion CORDER
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 105
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 84

    (41) asignaux -> empty .

    ASIGNA          reduce using rule 41 (asignaux -> empty .)


state 85

    (42) escritura -> write PARIZQ . escaux PARDER PYC
    (43) escaux -> . expresion nextexp
    (44) escaux -> . CTESTRING nextexp
    (45) escaux -> . llamada_esp nextexp
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (78) llamada_esp -> . ID PUNTO especiales PARIZQ PARDER
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTESTRING       shift and go to state 109
    ID              shift and go to state 95
    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102

    escaux                         shift and go to state 107
    expresion                      shift and go to state 108
    llamada_esp                    shift and go to state 110
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 86

    (55) condicion -> if PARIZQ . expresion PARDER bloque
    (56) condicion -> if PARIZQ . expresion PARDER bloque else bloque
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 111
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 87

    (57) whileloop -> while PARIZQ . expresion PARDER bloque
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 112
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 88

    (58) forloop -> for PARIZQ . expresion DOSPUNTOS expresion PARDER bloque
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 113
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 89

    (59) lectura -> read PARIZQ . ID PARDER PYC

    ID              shift and go to state 114


state 90

    (11) vaux -> ID CORIZQ CTEINT COMA CTEINT CORDER . nextvar
    (12) nextvar -> . COMA vaux
    (13) nextvar -> . empty
    (87) empty -> .

    COMA            shift and go to state 38
    PYC             reduce using rule 87 (empty -> .)

    nextvar                        shift and go to state 115
    empty                          shift and go to state 39

state 91

    (24) function -> ftype func ID PARIZQ funcaux PARDER varsaux bloque .

    void            reduce using rule 24 (function -> ftype func ID PARIZQ funcaux PARDER varsaux bloque .)
    int             reduce using rule 24 (function -> ftype func ID PARIZQ funcaux PARDER varsaux bloque .)
    float           reduce using rule 24 (function -> ftype func ID PARIZQ funcaux PARDER varsaux bloque .)
    string          reduce using rule 24 (function -> ftype func ID PARIZQ funcaux PARDER varsaux bloque .)
    bool            reduce using rule 24 (function -> ftype func ID PARIZQ funcaux PARDER varsaux bloque .)
    func            reduce using rule 24 (function -> ftype func ID PARIZQ funcaux PARDER varsaux bloque .)


state 92

    (25) function -> ftype func ID PARIZQ empty PARDER varsaux bloque .

    void            reduce using rule 25 (function -> ftype func ID PARIZQ empty PARDER varsaux bloque .)
    int             reduce using rule 25 (function -> ftype func ID PARIZQ empty PARDER varsaux bloque .)
    float           reduce using rule 25 (function -> ftype func ID PARIZQ empty PARDER varsaux bloque .)
    string          reduce using rule 25 (function -> ftype func ID PARIZQ empty PARDER varsaux bloque .)
    bool            reduce using rule 25 (function -> ftype func ID PARIZQ empty PARDER varsaux bloque .)
    func            reduce using rule 25 (function -> ftype func ID PARIZQ empty PARDER varsaux bloque .)


state 93

    (29) funcaux -> type ID COMA funcaux .

    PARDER          reduce using rule 29 (funcaux -> type ID COMA funcaux .)


state 94

    (37) asignacion -> ID asignaux ASIGNA . hyper_exp PYC
    (38) asignacion -> ID asignaux ASIGNA . llamada_esp PYC
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (78) llamada_esp -> . ID PUNTO especiales PARIZQ PARDER
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp

    ID              shift and go to state 95
    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102

    hyper_exp                      shift and go to state 116
    llamada_esp                    shift and go to state 117
    super_exp                      shift and go to state 104
    expresion                      shift and go to state 118
    term                           shift and go to state 99
    fact                           shift and go to state 100

state 95

    (78) llamada_esp -> ID . PUNTO especiales PARIZQ PARDER
    (68) fact -> ID .

    PUNTO           shift and go to state 119
    MAYORQUE        reduce using rule 68 (fact -> ID .)
    MENORQUE        reduce using rule 68 (fact -> ID .)
    EQUALS          reduce using rule 68 (fact -> ID .)
    DIFERENTE       reduce using rule 68 (fact -> ID .)
    ID              reduce using rule 68 (fact -> ID .)
    CTEINT          reduce using rule 68 (fact -> ID .)
    CTEFLOAT        reduce using rule 68 (fact -> ID .)
    AND             reduce using rule 68 (fact -> ID .)
    OR              reduce using rule 68 (fact -> ID .)
    MULT            reduce using rule 68 (fact -> ID .)
    DIV             reduce using rule 68 (fact -> ID .)
    MAS             reduce using rule 68 (fact -> ID .)
    MENOS           reduce using rule 68 (fact -> ID .)
    COMA            reduce using rule 68 (fact -> ID .)
    PARDER          reduce using rule 68 (fact -> ID .)
    PYC             reduce using rule 68 (fact -> ID .)


state 96

    (48) llamada -> ID PARIZQ expresion . llamaux PARDER
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion
    (51) llamaux -> . expresion nextparametro
    (52) llamaux -> . llamada_esp nextparametro
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (78) llamada_esp -> . ID PUNTO especiales PARIZQ PARDER
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125
    ID              shift and go to state 95
    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102

  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]
  ! ID              [ reduce using rule 73 (super_exp -> expresion .) ]
  ! CTEINT          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! CTEFLOAT        [ reduce using rule 73 (super_exp -> expresion .) ]

    expresion                      shift and go to state 120
    llamaux                        shift and go to state 121
    llamada_esp                    shift and go to state 126
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 97

    (50) llamada -> ID PARIZQ PARDER .

    ID              reduce using rule 50 (llamada -> ID PARIZQ PARDER .)
    write           reduce using rule 50 (llamada -> ID PARIZQ PARDER .)
    if              reduce using rule 50 (llamada -> ID PARIZQ PARDER .)
    while           reduce using rule 50 (llamada -> ID PARIZQ PARDER .)
    for             reduce using rule 50 (llamada -> ID PARIZQ PARDER .)
    read            reduce using rule 50 (llamada -> ID PARIZQ PARDER .)
    LLAVEDER        reduce using rule 50 (llamada -> ID PARIZQ PARDER .)


state 98

    (49) llamada -> ID PARIZQ llamada_esp . llamaux PARDER
    (51) llamaux -> . expresion nextparametro
    (52) llamaux -> . llamada_esp nextparametro
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (78) llamada_esp -> . ID PUNTO especiales PARIZQ PARDER
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    ID              shift and go to state 95
    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102

    llamada_esp                    shift and go to state 126
    llamaux                        shift and go to state 127
    expresion                      shift and go to state 120
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 99

    (60) expresion -> term .
    (61) expresion -> term . MAS term
    (62) expresion -> term . MENOS term

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    MAYORQUE        reduce using rule 60 (expresion -> term .)
    MENORQUE        reduce using rule 60 (expresion -> term .)
    EQUALS          reduce using rule 60 (expresion -> term .)
    DIFERENTE       reduce using rule 60 (expresion -> term .)
    ID              reduce using rule 60 (expresion -> term .)
    CTEINT          reduce using rule 60 (expresion -> term .)
    CTEFLOAT        reduce using rule 60 (expresion -> term .)
    AND             reduce using rule 60 (expresion -> term .)
    OR              reduce using rule 60 (expresion -> term .)
    MULT            reduce using rule 60 (expresion -> term .)
    DIV             reduce using rule 60 (expresion -> term .)
    CORDER          reduce using rule 60 (expresion -> term .)
    COMA            reduce using rule 60 (expresion -> term .)
    PARDER          reduce using rule 60 (expresion -> term .)
    DOSPUNTOS       reduce using rule 60 (expresion -> term .)
    PYC             reduce using rule 60 (expresion -> term .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129

  ! MAS             [ reduce using rule 60 (expresion -> term .) ]
  ! MENOS           [ reduce using rule 60 (expresion -> term .) ]


state 100

    (63) term -> fact .
    (64) term -> fact . MULT fact
    (65) term -> fact . DIV fact

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    MAYORQUE        reduce using rule 63 (term -> fact .)
    MENORQUE        reduce using rule 63 (term -> fact .)
    EQUALS          reduce using rule 63 (term -> fact .)
    DIFERENTE       reduce using rule 63 (term -> fact .)
    ID              reduce using rule 63 (term -> fact .)
    CTEINT          reduce using rule 63 (term -> fact .)
    CTEFLOAT        reduce using rule 63 (term -> fact .)
    AND             reduce using rule 63 (term -> fact .)
    OR              reduce using rule 63 (term -> fact .)
    MAS             reduce using rule 63 (term -> fact .)
    MENOS           reduce using rule 63 (term -> fact .)
    CORDER          reduce using rule 63 (term -> fact .)
    COMA            reduce using rule 63 (term -> fact .)
    PARDER          reduce using rule 63 (term -> fact .)
    DOSPUNTOS       reduce using rule 63 (term -> fact .)
    PYC             reduce using rule 63 (term -> fact .)
    MULT            shift and go to state 130
    DIV             shift and go to state 131

  ! MULT            [ reduce using rule 63 (term -> fact .) ]
  ! DIV             [ reduce using rule 63 (term -> fact .) ]


state 101

    (66) fact -> CTEINT .

    MAYORQUE        reduce using rule 66 (fact -> CTEINT .)
    MENORQUE        reduce using rule 66 (fact -> CTEINT .)
    EQUALS          reduce using rule 66 (fact -> CTEINT .)
    DIFERENTE       reduce using rule 66 (fact -> CTEINT .)
    ID              reduce using rule 66 (fact -> CTEINT .)
    CTEINT          reduce using rule 66 (fact -> CTEINT .)
    CTEFLOAT        reduce using rule 66 (fact -> CTEINT .)
    AND             reduce using rule 66 (fact -> CTEINT .)
    OR              reduce using rule 66 (fact -> CTEINT .)
    MULT            reduce using rule 66 (fact -> CTEINT .)
    DIV             reduce using rule 66 (fact -> CTEINT .)
    MAS             reduce using rule 66 (fact -> CTEINT .)
    MENOS           reduce using rule 66 (fact -> CTEINT .)
    CORDER          reduce using rule 66 (fact -> CTEINT .)
    COMA            reduce using rule 66 (fact -> CTEINT .)
    PARDER          reduce using rule 66 (fact -> CTEINT .)
    DOSPUNTOS       reduce using rule 66 (fact -> CTEINT .)
    PYC             reduce using rule 66 (fact -> CTEINT .)


state 102

    (67) fact -> CTEFLOAT .

    MAYORQUE        reduce using rule 67 (fact -> CTEFLOAT .)
    MENORQUE        reduce using rule 67 (fact -> CTEFLOAT .)
    EQUALS          reduce using rule 67 (fact -> CTEFLOAT .)
    DIFERENTE       reduce using rule 67 (fact -> CTEFLOAT .)
    ID              reduce using rule 67 (fact -> CTEFLOAT .)
    CTEINT          reduce using rule 67 (fact -> CTEFLOAT .)
    CTEFLOAT        reduce using rule 67 (fact -> CTEFLOAT .)
    AND             reduce using rule 67 (fact -> CTEFLOAT .)
    OR              reduce using rule 67 (fact -> CTEFLOAT .)
    MULT            reduce using rule 67 (fact -> CTEFLOAT .)
    DIV             reduce using rule 67 (fact -> CTEFLOAT .)
    MAS             reduce using rule 67 (fact -> CTEFLOAT .)
    MENOS           reduce using rule 67 (fact -> CTEFLOAT .)
    CORDER          reduce using rule 67 (fact -> CTEFLOAT .)
    COMA            reduce using rule 67 (fact -> CTEFLOAT .)
    PARDER          reduce using rule 67 (fact -> CTEFLOAT .)
    DOSPUNTOS       reduce using rule 67 (fact -> CTEFLOAT .)
    PYC             reduce using rule 67 (fact -> CTEFLOAT .)


state 103

    (69) fact -> hyper_exp .

    MAYORQUE        reduce using rule 69 (fact -> hyper_exp .)
    MENORQUE        reduce using rule 69 (fact -> hyper_exp .)
    EQUALS          reduce using rule 69 (fact -> hyper_exp .)
    DIFERENTE       reduce using rule 69 (fact -> hyper_exp .)
    ID              reduce using rule 69 (fact -> hyper_exp .)
    CTEINT          reduce using rule 69 (fact -> hyper_exp .)
    CTEFLOAT        reduce using rule 69 (fact -> hyper_exp .)
    AND             reduce using rule 69 (fact -> hyper_exp .)
    OR              reduce using rule 69 (fact -> hyper_exp .)
    MULT            reduce using rule 69 (fact -> hyper_exp .)
    DIV             reduce using rule 69 (fact -> hyper_exp .)
    MAS             reduce using rule 69 (fact -> hyper_exp .)
    MENOS           reduce using rule 69 (fact -> hyper_exp .)
    CORDER          reduce using rule 69 (fact -> hyper_exp .)
    COMA            reduce using rule 69 (fact -> hyper_exp .)
    PARDER          reduce using rule 69 (fact -> hyper_exp .)
    DOSPUNTOS       reduce using rule 69 (fact -> hyper_exp .)
    PYC             reduce using rule 69 (fact -> hyper_exp .)


state 104

    (70) hyper_exp -> super_exp .
    (71) hyper_exp -> super_exp . AND super_exp
    (72) hyper_exp -> super_exp . OR super_exp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAYORQUE        reduce using rule 70 (hyper_exp -> super_exp .)
    MENORQUE        reduce using rule 70 (hyper_exp -> super_exp .)
    EQUALS          reduce using rule 70 (hyper_exp -> super_exp .)
    DIFERENTE       reduce using rule 70 (hyper_exp -> super_exp .)
    ID              reduce using rule 70 (hyper_exp -> super_exp .)
    CTEINT          reduce using rule 70 (hyper_exp -> super_exp .)
    CTEFLOAT        reduce using rule 70 (hyper_exp -> super_exp .)
    MULT            reduce using rule 70 (hyper_exp -> super_exp .)
    DIV             reduce using rule 70 (hyper_exp -> super_exp .)
    MAS             reduce using rule 70 (hyper_exp -> super_exp .)
    MENOS           reduce using rule 70 (hyper_exp -> super_exp .)
    CORDER          reduce using rule 70 (hyper_exp -> super_exp .)
    COMA            reduce using rule 70 (hyper_exp -> super_exp .)
    PARDER          reduce using rule 70 (hyper_exp -> super_exp .)
    DOSPUNTOS       reduce using rule 70 (hyper_exp -> super_exp .)
    PYC             reduce using rule 70 (hyper_exp -> super_exp .)
    AND             shift and go to state 132
    OR              shift and go to state 133

  ! AND             [ reduce using rule 70 (hyper_exp -> super_exp .) ]
  ! OR              [ reduce using rule 70 (hyper_exp -> super_exp .) ]


state 105

    (39) asignaux -> CORIZQ expresion . CORDER
    (40) asignaux -> CORIZQ expresion . COMA expresion CORDER
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! shift/reduce conflict for CORDER resolved as shift
  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    CORDER          shift and go to state 134
    COMA            shift and go to state 135
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! CORDER          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! COMA            [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 106

    (68) fact -> ID .

    CORDER          reduce using rule 68 (fact -> ID .)
    COMA            reduce using rule 68 (fact -> ID .)
    MAYORQUE        reduce using rule 68 (fact -> ID .)
    MENORQUE        reduce using rule 68 (fact -> ID .)
    EQUALS          reduce using rule 68 (fact -> ID .)
    DIFERENTE       reduce using rule 68 (fact -> ID .)
    AND             reduce using rule 68 (fact -> ID .)
    OR              reduce using rule 68 (fact -> ID .)
    MULT            reduce using rule 68 (fact -> ID .)
    DIV             reduce using rule 68 (fact -> ID .)
    MAS             reduce using rule 68 (fact -> ID .)
    MENOS           reduce using rule 68 (fact -> ID .)
    PARDER          reduce using rule 68 (fact -> ID .)
    DOSPUNTOS       reduce using rule 68 (fact -> ID .)
    ID              reduce using rule 68 (fact -> ID .)
    CTEINT          reduce using rule 68 (fact -> ID .)
    CTEFLOAT        reduce using rule 68 (fact -> ID .)
    PYC             reduce using rule 68 (fact -> ID .)


state 107

    (42) escritura -> write PARIZQ escaux . PARDER PYC

    PARDER          shift and go to state 136


state 108

    (43) escaux -> expresion . nextexp
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion
    (46) nextexp -> . COMA escaux
    (47) nextexp -> . empty
    (87) empty -> .

  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for PARDER resolved using rule 73 (super_exp -> expresion .)
    PARDER          reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125
    COMA            shift and go to state 138

  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]
  ! COMA            [ reduce using rule 73 (super_exp -> expresion .) ]
  ! PARDER          [ reduce using rule 87 (empty -> .) ]

    nextexp                        shift and go to state 137
    empty                          shift and go to state 139

state 109

    (44) escaux -> CTESTRING . nextexp
    (46) nextexp -> . COMA escaux
    (47) nextexp -> . empty
    (87) empty -> .

    COMA            shift and go to state 138
    PARDER          reduce using rule 87 (empty -> .)

    nextexp                        shift and go to state 140
    empty                          shift and go to state 139

state 110

    (45) escaux -> llamada_esp . nextexp
    (46) nextexp -> . COMA escaux
    (47) nextexp -> . empty
    (87) empty -> .

    COMA            shift and go to state 138
    PARDER          reduce using rule 87 (empty -> .)

    nextexp                        shift and go to state 141
    empty                          shift and go to state 139

state 111

    (55) condicion -> if PARIZQ expresion . PARDER bloque
    (56) condicion -> if PARIZQ expresion . PARDER bloque else bloque
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! shift/reduce conflict for PARDER resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    PARDER          shift and go to state 142
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! PARDER          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 112

    (57) whileloop -> while PARIZQ expresion . PARDER bloque
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! shift/reduce conflict for PARDER resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    PARDER          shift and go to state 143
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! PARDER          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 113

    (58) forloop -> for PARIZQ expresion . DOSPUNTOS expresion PARDER bloque
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! shift/reduce conflict for DOSPUNTOS resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    DOSPUNTOS       shift and go to state 144
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! DOSPUNTOS       [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 114

    (59) lectura -> read PARIZQ ID . PARDER PYC

    PARDER          shift and go to state 145


state 115

    (11) vaux -> ID CORIZQ CTEINT COMA CTEINT CORDER nextvar .

    PYC             reduce using rule 11 (vaux -> ID CORIZQ CTEINT COMA CTEINT CORDER nextvar .)


state 116

    (37) asignacion -> ID asignaux ASIGNA hyper_exp . PYC
    (69) fact -> hyper_exp .

  ! shift/reduce conflict for PYC resolved as shift
    PYC             shift and go to state 146
    MULT            reduce using rule 69 (fact -> hyper_exp .)
    DIV             reduce using rule 69 (fact -> hyper_exp .)
    MAS             reduce using rule 69 (fact -> hyper_exp .)
    MENOS           reduce using rule 69 (fact -> hyper_exp .)
    MAYORQUE        reduce using rule 69 (fact -> hyper_exp .)
    MENORQUE        reduce using rule 69 (fact -> hyper_exp .)
    EQUALS          reduce using rule 69 (fact -> hyper_exp .)
    DIFERENTE       reduce using rule 69 (fact -> hyper_exp .)
    AND             reduce using rule 69 (fact -> hyper_exp .)
    OR              reduce using rule 69 (fact -> hyper_exp .)

  ! PYC             [ reduce using rule 69 (fact -> hyper_exp .) ]


state 117

    (38) asignacion -> ID asignaux ASIGNA llamada_esp . PYC

    PYC             shift and go to state 147


state 118

    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    PYC             reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    ID              reduce using rule 73 (super_exp -> expresion .)
    CTEINT          reduce using rule 73 (super_exp -> expresion .)
    CTEFLOAT        reduce using rule 73 (super_exp -> expresion .)
    CORDER          reduce using rule 73 (super_exp -> expresion .)
    COMA            reduce using rule 73 (super_exp -> expresion .)
    PARDER          reduce using rule 73 (super_exp -> expresion .)
    DOSPUNTOS       reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 119

    (78) llamada_esp -> ID PUNTO . especiales PARIZQ PARDER
    (79) especiales -> . length
    (80) especiales -> . max
    (81) especiales -> . min
    (82) especiales -> . avg
    (83) especiales -> . median
    (84) especiales -> . mode
    (85) especiales -> . variance
    (86) especiales -> . stdev

    length          shift and go to state 149
    max             shift and go to state 150
    min             shift and go to state 151
    avg             shift and go to state 152
    median          shift and go to state 153
    mode            shift and go to state 154
    variance        shift and go to state 155
    stdev           shift and go to state 156

    especiales                     shift and go to state 148

state 120

    (51) llamaux -> expresion . nextparametro
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion
    (53) nextparametro -> . COMA llamaux
    (54) nextparametro -> . empty
    (87) empty -> .

  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for PARDER resolved using rule 73 (super_exp -> expresion .)
    PARDER          reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125
    COMA            shift and go to state 158

  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]
  ! COMA            [ reduce using rule 73 (super_exp -> expresion .) ]
  ! PARDER          [ reduce using rule 87 (empty -> .) ]

    nextparametro                  shift and go to state 157
    empty                          shift and go to state 159

state 121

    (48) llamada -> ID PARIZQ expresion llamaux . PARDER

    PARDER          shift and go to state 160


state 122

    (74) super_exp -> expresion MAYORQUE . expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 161
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 123

    (75) super_exp -> expresion MENORQUE . expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 162
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 124

    (76) super_exp -> expresion EQUALS . expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 163
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 125

    (77) super_exp -> expresion DIFERENTE . expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 164
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 126

    (52) llamaux -> llamada_esp . nextparametro
    (53) nextparametro -> . COMA llamaux
    (54) nextparametro -> . empty
    (87) empty -> .

    COMA            shift and go to state 158
    PARDER          reduce using rule 87 (empty -> .)

    nextparametro                  shift and go to state 165
    empty                          shift and go to state 159

state 127

    (49) llamada -> ID PARIZQ llamada_esp llamaux . PARDER

    PARDER          shift and go to state 166


state 128

    (61) expresion -> term MAS . term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    term                           shift and go to state 167
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104
    expresion                      shift and go to state 118

state 129

    (62) expresion -> term MENOS . term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    term                           shift and go to state 168
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104
    expresion                      shift and go to state 118

state 130

    (64) term -> fact MULT . fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    fact                           shift and go to state 169
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104
    expresion                      shift and go to state 118
    term                           shift and go to state 99

state 131

    (65) term -> fact DIV . fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    fact                           shift and go to state 170
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104
    expresion                      shift and go to state 118
    term                           shift and go to state 99

state 132

    (71) hyper_exp -> super_exp AND . super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    super_exp                      shift and go to state 171
    expresion                      shift and go to state 118
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103

state 133

    (72) hyper_exp -> super_exp OR . super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    super_exp                      shift and go to state 172
    expresion                      shift and go to state 118
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103

state 134

    (39) asignaux -> CORIZQ expresion CORDER .

    ASIGNA          reduce using rule 39 (asignaux -> CORIZQ expresion CORDER .)


state 135

    (40) asignaux -> CORIZQ expresion COMA . expresion CORDER
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 173
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 136

    (42) escritura -> write PARIZQ escaux PARDER . PYC

    PYC             shift and go to state 174


state 137

    (43) escaux -> expresion nextexp .

    PARDER          reduce using rule 43 (escaux -> expresion nextexp .)


state 138

    (46) nextexp -> COMA . escaux
    (43) escaux -> . expresion nextexp
    (44) escaux -> . CTESTRING nextexp
    (45) escaux -> . llamada_esp nextexp
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (78) llamada_esp -> . ID PUNTO especiales PARIZQ PARDER
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTESTRING       shift and go to state 109
    ID              shift and go to state 95
    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102

    escaux                         shift and go to state 175
    expresion                      shift and go to state 108
    llamada_esp                    shift and go to state 110
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 139

    (47) nextexp -> empty .

    PARDER          reduce using rule 47 (nextexp -> empty .)


state 140

    (44) escaux -> CTESTRING nextexp .

    PARDER          reduce using rule 44 (escaux -> CTESTRING nextexp .)


state 141

    (45) escaux -> llamada_esp nextexp .

    PARDER          reduce using rule 45 (escaux -> llamada_esp nextexp .)


state 142

    (55) condicion -> if PARIZQ expresion PARDER . bloque
    (56) condicion -> if PARIZQ expresion PARDER . bloque else bloque
    (16) bloque -> . LLAVEIZQ bloqueaux LLAVEDER
    (17) bloque -> . LLAVEIZQ empty LLAVEDER

    LLAVEIZQ        shift and go to state 50

    bloque                         shift and go to state 176

state 143

    (57) whileloop -> while PARIZQ expresion PARDER . bloque
    (16) bloque -> . LLAVEIZQ bloqueaux LLAVEDER
    (17) bloque -> . LLAVEIZQ empty LLAVEDER

    LLAVEIZQ        shift and go to state 50

    bloque                         shift and go to state 177

state 144

    (58) forloop -> for PARIZQ expresion DOSPUNTOS . expresion PARDER bloque
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102
    ID              shift and go to state 106

    expresion                      shift and go to state 178
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 145

    (59) lectura -> read PARIZQ ID PARDER . PYC

    PYC             shift and go to state 179


state 146

    (37) asignacion -> ID asignaux ASIGNA hyper_exp PYC .

    ID              reduce using rule 37 (asignacion -> ID asignaux ASIGNA hyper_exp PYC .)
    write           reduce using rule 37 (asignacion -> ID asignaux ASIGNA hyper_exp PYC .)
    if              reduce using rule 37 (asignacion -> ID asignaux ASIGNA hyper_exp PYC .)
    while           reduce using rule 37 (asignacion -> ID asignaux ASIGNA hyper_exp PYC .)
    for             reduce using rule 37 (asignacion -> ID asignaux ASIGNA hyper_exp PYC .)
    read            reduce using rule 37 (asignacion -> ID asignaux ASIGNA hyper_exp PYC .)
    LLAVEDER        reduce using rule 37 (asignacion -> ID asignaux ASIGNA hyper_exp PYC .)


state 147

    (38) asignacion -> ID asignaux ASIGNA llamada_esp PYC .

    ID              reduce using rule 38 (asignacion -> ID asignaux ASIGNA llamada_esp PYC .)
    write           reduce using rule 38 (asignacion -> ID asignaux ASIGNA llamada_esp PYC .)
    if              reduce using rule 38 (asignacion -> ID asignaux ASIGNA llamada_esp PYC .)
    while           reduce using rule 38 (asignacion -> ID asignaux ASIGNA llamada_esp PYC .)
    for             reduce using rule 38 (asignacion -> ID asignaux ASIGNA llamada_esp PYC .)
    read            reduce using rule 38 (asignacion -> ID asignaux ASIGNA llamada_esp PYC .)
    LLAVEDER        reduce using rule 38 (asignacion -> ID asignaux ASIGNA llamada_esp PYC .)


state 148

    (78) llamada_esp -> ID PUNTO especiales . PARIZQ PARDER

    PARIZQ          shift and go to state 180


state 149

    (79) especiales -> length .

    PARIZQ          reduce using rule 79 (especiales -> length .)


state 150

    (80) especiales -> max .

    PARIZQ          reduce using rule 80 (especiales -> max .)


state 151

    (81) especiales -> min .

    PARIZQ          reduce using rule 81 (especiales -> min .)


state 152

    (82) especiales -> avg .

    PARIZQ          reduce using rule 82 (especiales -> avg .)


state 153

    (83) especiales -> median .

    PARIZQ          reduce using rule 83 (especiales -> median .)


state 154

    (84) especiales -> mode .

    PARIZQ          reduce using rule 84 (especiales -> mode .)


state 155

    (85) especiales -> variance .

    PARIZQ          reduce using rule 85 (especiales -> variance .)


state 156

    (86) especiales -> stdev .

    PARIZQ          reduce using rule 86 (especiales -> stdev .)


state 157

    (51) llamaux -> expresion nextparametro .

    PARDER          reduce using rule 51 (llamaux -> expresion nextparametro .)


state 158

    (53) nextparametro -> COMA . llamaux
    (51) llamaux -> . expresion nextparametro
    (52) llamaux -> . llamada_esp nextparametro
    (60) expresion -> . term
    (61) expresion -> . term MAS term
    (62) expresion -> . term MENOS term
    (78) llamada_esp -> . ID PUNTO especiales PARIZQ PARDER
    (63) term -> . fact
    (64) term -> . fact MULT fact
    (65) term -> . fact DIV fact
    (66) fact -> . CTEINT
    (67) fact -> . CTEFLOAT
    (68) fact -> . ID
    (69) fact -> . hyper_exp
    (70) hyper_exp -> . super_exp
    (71) hyper_exp -> . super_exp AND super_exp
    (72) hyper_exp -> . super_exp OR super_exp
    (73) super_exp -> . expresion
    (74) super_exp -> . expresion MAYORQUE expresion
    (75) super_exp -> . expresion MENORQUE expresion
    (76) super_exp -> . expresion EQUALS expresion
    (77) super_exp -> . expresion DIFERENTE expresion

    ID              shift and go to state 95
    CTEINT          shift and go to state 101
    CTEFLOAT        shift and go to state 102

    llamaux                        shift and go to state 181
    expresion                      shift and go to state 120
    llamada_esp                    shift and go to state 126
    term                           shift and go to state 99
    fact                           shift and go to state 100
    hyper_exp                      shift and go to state 103
    super_exp                      shift and go to state 104

state 159

    (54) nextparametro -> empty .

    PARDER          reduce using rule 54 (nextparametro -> empty .)


state 160

    (48) llamada -> ID PARIZQ expresion llamaux PARDER .

    ID              reduce using rule 48 (llamada -> ID PARIZQ expresion llamaux PARDER .)
    write           reduce using rule 48 (llamada -> ID PARIZQ expresion llamaux PARDER .)
    if              reduce using rule 48 (llamada -> ID PARIZQ expresion llamaux PARDER .)
    while           reduce using rule 48 (llamada -> ID PARIZQ expresion llamaux PARDER .)
    for             reduce using rule 48 (llamada -> ID PARIZQ expresion llamaux PARDER .)
    read            reduce using rule 48 (llamada -> ID PARIZQ expresion llamaux PARDER .)
    LLAVEDER        reduce using rule 48 (llamada -> ID PARIZQ expresion llamaux PARDER .)


state 161

    (74) super_exp -> expresion MAYORQUE expresion .
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! reduce/reduce conflict for MAYORQUE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for EQUALS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for ID resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CTEINT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for AND resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for OR resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MULT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DIV resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MAS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MENOS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CORDER resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for COMA resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for PARDER resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for PYC resolved using rule 73 (super_exp -> expresion .)
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    ID              reduce using rule 73 (super_exp -> expresion .)
    CTEINT          reduce using rule 73 (super_exp -> expresion .)
    CTEFLOAT        reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    CORDER          reduce using rule 73 (super_exp -> expresion .)
    COMA            reduce using rule 73 (super_exp -> expresion .)
    PARDER          reduce using rule 73 (super_exp -> expresion .)
    DOSPUNTOS       reduce using rule 73 (super_exp -> expresion .)
    PYC             reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! MAYORQUE        [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! MENORQUE        [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! EQUALS          [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! DIFERENTE       [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! ID              [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! CTEINT          [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! CTEFLOAT        [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! AND             [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! OR              [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! MULT            [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! DIV             [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! MAS             [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! MENOS           [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! CORDER          [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! COMA            [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! PARDER          [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! DOSPUNTOS       [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! PYC             [ reduce using rule 74 (super_exp -> expresion MAYORQUE expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 162

    (75) super_exp -> expresion MENORQUE expresion .
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! reduce/reduce conflict for MAYORQUE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for EQUALS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for ID resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CTEINT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for AND resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for OR resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MULT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DIV resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MAS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MENOS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CORDER resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for COMA resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for PARDER resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for PYC resolved using rule 73 (super_exp -> expresion .)
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    ID              reduce using rule 73 (super_exp -> expresion .)
    CTEINT          reduce using rule 73 (super_exp -> expresion .)
    CTEFLOAT        reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    CORDER          reduce using rule 73 (super_exp -> expresion .)
    COMA            reduce using rule 73 (super_exp -> expresion .)
    PARDER          reduce using rule 73 (super_exp -> expresion .)
    DOSPUNTOS       reduce using rule 73 (super_exp -> expresion .)
    PYC             reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! MAYORQUE        [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! MENORQUE        [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! EQUALS          [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! DIFERENTE       [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! ID              [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! CTEINT          [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! CTEFLOAT        [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! AND             [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! OR              [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! MULT            [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! DIV             [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! MAS             [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! MENOS           [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! CORDER          [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! COMA            [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! PARDER          [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! DOSPUNTOS       [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! PYC             [ reduce using rule 75 (super_exp -> expresion MENORQUE expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 163

    (76) super_exp -> expresion EQUALS expresion .
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! reduce/reduce conflict for MAYORQUE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for EQUALS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for ID resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CTEINT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for AND resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for OR resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MULT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DIV resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MAS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MENOS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CORDER resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for COMA resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for PARDER resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for PYC resolved using rule 73 (super_exp -> expresion .)
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    ID              reduce using rule 73 (super_exp -> expresion .)
    CTEINT          reduce using rule 73 (super_exp -> expresion .)
    CTEFLOAT        reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    CORDER          reduce using rule 73 (super_exp -> expresion .)
    COMA            reduce using rule 73 (super_exp -> expresion .)
    PARDER          reduce using rule 73 (super_exp -> expresion .)
    DOSPUNTOS       reduce using rule 73 (super_exp -> expresion .)
    PYC             reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! MAYORQUE        [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! MENORQUE        [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! EQUALS          [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! DIFERENTE       [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! ID              [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! CTEINT          [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! CTEFLOAT        [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! AND             [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! OR              [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! MULT            [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! DIV             [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! MAS             [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! MENOS           [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! CORDER          [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! COMA            [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! PARDER          [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! DOSPUNTOS       [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! PYC             [ reduce using rule 76 (super_exp -> expresion EQUALS expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 164

    (77) super_exp -> expresion DIFERENTE expresion .
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! reduce/reduce conflict for MAYORQUE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for EQUALS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for ID resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CTEINT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for AND resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for OR resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MULT resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DIV resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MAS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for MENOS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for CORDER resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for COMA resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for PARDER resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 73 (super_exp -> expresion .)
  ! reduce/reduce conflict for PYC resolved using rule 73 (super_exp -> expresion .)
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    ID              reduce using rule 73 (super_exp -> expresion .)
    CTEINT          reduce using rule 73 (super_exp -> expresion .)
    CTEFLOAT        reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    CORDER          reduce using rule 73 (super_exp -> expresion .)
    COMA            reduce using rule 73 (super_exp -> expresion .)
    PARDER          reduce using rule 73 (super_exp -> expresion .)
    DOSPUNTOS       reduce using rule 73 (super_exp -> expresion .)
    PYC             reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! MAYORQUE        [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! MENORQUE        [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! EQUALS          [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! DIFERENTE       [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! ID              [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! CTEINT          [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! CTEFLOAT        [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! AND             [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! OR              [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! MULT            [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! DIV             [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! MAS             [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! MENOS           [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! CORDER          [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! COMA            [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! PARDER          [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! DOSPUNTOS       [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! PYC             [ reduce using rule 77 (super_exp -> expresion DIFERENTE expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 165

    (52) llamaux -> llamada_esp nextparametro .

    PARDER          reduce using rule 52 (llamaux -> llamada_esp nextparametro .)


state 166

    (49) llamada -> ID PARIZQ llamada_esp llamaux PARDER .

    ID              reduce using rule 49 (llamada -> ID PARIZQ llamada_esp llamaux PARDER .)
    write           reduce using rule 49 (llamada -> ID PARIZQ llamada_esp llamaux PARDER .)
    if              reduce using rule 49 (llamada -> ID PARIZQ llamada_esp llamaux PARDER .)
    while           reduce using rule 49 (llamada -> ID PARIZQ llamada_esp llamaux PARDER .)
    for             reduce using rule 49 (llamada -> ID PARIZQ llamada_esp llamaux PARDER .)
    read            reduce using rule 49 (llamada -> ID PARIZQ llamada_esp llamaux PARDER .)
    LLAVEDER        reduce using rule 49 (llamada -> ID PARIZQ llamada_esp llamaux PARDER .)


state 167

    (61) expresion -> term MAS term .
    (60) expresion -> term .
    (61) expresion -> term . MAS term
    (62) expresion -> term . MENOS term

  ! reduce/reduce conflict for MAYORQUE resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for ID resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for CTEINT resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for AND resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for OR resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for MULT resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for DIV resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for MAS resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for MENOS resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for CORDER resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for COMA resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for PARDER resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for PYC resolved using rule 60 (expresion -> term .)
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    MAYORQUE        reduce using rule 60 (expresion -> term .)
    MENORQUE        reduce using rule 60 (expresion -> term .)
    EQUALS          reduce using rule 60 (expresion -> term .)
    DIFERENTE       reduce using rule 60 (expresion -> term .)
    ID              reduce using rule 60 (expresion -> term .)
    CTEINT          reduce using rule 60 (expresion -> term .)
    CTEFLOAT        reduce using rule 60 (expresion -> term .)
    AND             reduce using rule 60 (expresion -> term .)
    OR              reduce using rule 60 (expresion -> term .)
    MULT            reduce using rule 60 (expresion -> term .)
    DIV             reduce using rule 60 (expresion -> term .)
    CORDER          reduce using rule 60 (expresion -> term .)
    COMA            reduce using rule 60 (expresion -> term .)
    PARDER          reduce using rule 60 (expresion -> term .)
    DOSPUNTOS       reduce using rule 60 (expresion -> term .)
    PYC             reduce using rule 60 (expresion -> term .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129

  ! MAYORQUE        [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! MENORQUE        [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! EQUALS          [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! DIFERENTE       [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! ID              [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! CTEINT          [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! CTEFLOAT        [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! AND             [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! OR              [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! MULT            [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! DIV             [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! MAS             [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! MENOS           [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! CORDER          [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! COMA            [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! PARDER          [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! DOSPUNTOS       [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! PYC             [ reduce using rule 61 (expresion -> term MAS term .) ]
  ! MAS             [ reduce using rule 60 (expresion -> term .) ]
  ! MENOS           [ reduce using rule 60 (expresion -> term .) ]


state 168

    (62) expresion -> term MENOS term .
    (60) expresion -> term .
    (61) expresion -> term . MAS term
    (62) expresion -> term . MENOS term

  ! reduce/reduce conflict for MAYORQUE resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for ID resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for CTEINT resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for AND resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for OR resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for MULT resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for DIV resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for MAS resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for MENOS resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for CORDER resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for COMA resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for PARDER resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 60 (expresion -> term .)
  ! reduce/reduce conflict for PYC resolved using rule 60 (expresion -> term .)
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    MAYORQUE        reduce using rule 60 (expresion -> term .)
    MENORQUE        reduce using rule 60 (expresion -> term .)
    EQUALS          reduce using rule 60 (expresion -> term .)
    DIFERENTE       reduce using rule 60 (expresion -> term .)
    ID              reduce using rule 60 (expresion -> term .)
    CTEINT          reduce using rule 60 (expresion -> term .)
    CTEFLOAT        reduce using rule 60 (expresion -> term .)
    AND             reduce using rule 60 (expresion -> term .)
    OR              reduce using rule 60 (expresion -> term .)
    MULT            reduce using rule 60 (expresion -> term .)
    DIV             reduce using rule 60 (expresion -> term .)
    CORDER          reduce using rule 60 (expresion -> term .)
    COMA            reduce using rule 60 (expresion -> term .)
    PARDER          reduce using rule 60 (expresion -> term .)
    DOSPUNTOS       reduce using rule 60 (expresion -> term .)
    PYC             reduce using rule 60 (expresion -> term .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129

  ! MAYORQUE        [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! MENORQUE        [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! EQUALS          [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! DIFERENTE       [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! ID              [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! CTEINT          [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! CTEFLOAT        [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! AND             [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! OR              [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! MULT            [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! DIV             [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! MAS             [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! MENOS           [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! CORDER          [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! COMA            [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! PARDER          [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! DOSPUNTOS       [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! PYC             [ reduce using rule 62 (expresion -> term MENOS term .) ]
  ! MAS             [ reduce using rule 60 (expresion -> term .) ]
  ! MENOS           [ reduce using rule 60 (expresion -> term .) ]


state 169

    (64) term -> fact MULT fact .
    (63) term -> fact .
    (64) term -> fact . MULT fact
    (65) term -> fact . DIV fact

  ! reduce/reduce conflict for MAYORQUE resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for EQUALS resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for ID resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for CTEINT resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for AND resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for OR resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for MULT resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for DIV resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for MAS resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for MENOS resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for CORDER resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for COMA resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for PARDER resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for PYC resolved using rule 63 (term -> fact .)
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    MAYORQUE        reduce using rule 63 (term -> fact .)
    MENORQUE        reduce using rule 63 (term -> fact .)
    EQUALS          reduce using rule 63 (term -> fact .)
    DIFERENTE       reduce using rule 63 (term -> fact .)
    ID              reduce using rule 63 (term -> fact .)
    CTEINT          reduce using rule 63 (term -> fact .)
    CTEFLOAT        reduce using rule 63 (term -> fact .)
    AND             reduce using rule 63 (term -> fact .)
    OR              reduce using rule 63 (term -> fact .)
    MAS             reduce using rule 63 (term -> fact .)
    MENOS           reduce using rule 63 (term -> fact .)
    CORDER          reduce using rule 63 (term -> fact .)
    COMA            reduce using rule 63 (term -> fact .)
    PARDER          reduce using rule 63 (term -> fact .)
    DOSPUNTOS       reduce using rule 63 (term -> fact .)
    PYC             reduce using rule 63 (term -> fact .)
    MULT            shift and go to state 130
    DIV             shift and go to state 131

  ! MAYORQUE        [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! MENORQUE        [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! EQUALS          [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! DIFERENTE       [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! ID              [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! CTEINT          [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! CTEFLOAT        [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! AND             [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! OR              [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! MULT            [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! DIV             [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! MAS             [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! MENOS           [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! CORDER          [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! COMA            [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! PARDER          [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! DOSPUNTOS       [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! PYC             [ reduce using rule 64 (term -> fact MULT fact .) ]
  ! MULT            [ reduce using rule 63 (term -> fact .) ]
  ! DIV             [ reduce using rule 63 (term -> fact .) ]


state 170

    (65) term -> fact DIV fact .
    (63) term -> fact .
    (64) term -> fact . MULT fact
    (65) term -> fact . DIV fact

  ! reduce/reduce conflict for MAYORQUE resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for EQUALS resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for ID resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for CTEINT resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for AND resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for OR resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for MULT resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for DIV resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for MAS resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for MENOS resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for CORDER resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for COMA resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for PARDER resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 63 (term -> fact .)
  ! reduce/reduce conflict for PYC resolved using rule 63 (term -> fact .)
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    MAYORQUE        reduce using rule 63 (term -> fact .)
    MENORQUE        reduce using rule 63 (term -> fact .)
    EQUALS          reduce using rule 63 (term -> fact .)
    DIFERENTE       reduce using rule 63 (term -> fact .)
    ID              reduce using rule 63 (term -> fact .)
    CTEINT          reduce using rule 63 (term -> fact .)
    CTEFLOAT        reduce using rule 63 (term -> fact .)
    AND             reduce using rule 63 (term -> fact .)
    OR              reduce using rule 63 (term -> fact .)
    MAS             reduce using rule 63 (term -> fact .)
    MENOS           reduce using rule 63 (term -> fact .)
    CORDER          reduce using rule 63 (term -> fact .)
    COMA            reduce using rule 63 (term -> fact .)
    PARDER          reduce using rule 63 (term -> fact .)
    DOSPUNTOS       reduce using rule 63 (term -> fact .)
    PYC             reduce using rule 63 (term -> fact .)
    MULT            shift and go to state 130
    DIV             shift and go to state 131

  ! MAYORQUE        [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! MENORQUE        [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! EQUALS          [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! DIFERENTE       [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! ID              [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! CTEINT          [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! CTEFLOAT        [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! AND             [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! OR              [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! MULT            [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! DIV             [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! MAS             [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! MENOS           [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! CORDER          [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! COMA            [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! PARDER          [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! DOSPUNTOS       [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! PYC             [ reduce using rule 65 (term -> fact DIV fact .) ]
  ! MULT            [ reduce using rule 63 (term -> fact .) ]
  ! DIV             [ reduce using rule 63 (term -> fact .) ]


state 171

    (71) hyper_exp -> super_exp AND super_exp .
    (70) hyper_exp -> super_exp .
    (71) hyper_exp -> super_exp . AND super_exp
    (72) hyper_exp -> super_exp . OR super_exp

  ! reduce/reduce conflict for MAYORQUE resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for EQUALS resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for ID resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for CTEINT resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for AND resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for OR resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for MULT resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for DIV resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for MAS resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for MENOS resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for CORDER resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for COMA resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for PARDER resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for PYC resolved using rule 70 (hyper_exp -> super_exp .)
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAYORQUE        reduce using rule 70 (hyper_exp -> super_exp .)
    MENORQUE        reduce using rule 70 (hyper_exp -> super_exp .)
    EQUALS          reduce using rule 70 (hyper_exp -> super_exp .)
    DIFERENTE       reduce using rule 70 (hyper_exp -> super_exp .)
    ID              reduce using rule 70 (hyper_exp -> super_exp .)
    CTEINT          reduce using rule 70 (hyper_exp -> super_exp .)
    CTEFLOAT        reduce using rule 70 (hyper_exp -> super_exp .)
    MULT            reduce using rule 70 (hyper_exp -> super_exp .)
    DIV             reduce using rule 70 (hyper_exp -> super_exp .)
    MAS             reduce using rule 70 (hyper_exp -> super_exp .)
    MENOS           reduce using rule 70 (hyper_exp -> super_exp .)
    CORDER          reduce using rule 70 (hyper_exp -> super_exp .)
    COMA            reduce using rule 70 (hyper_exp -> super_exp .)
    PARDER          reduce using rule 70 (hyper_exp -> super_exp .)
    DOSPUNTOS       reduce using rule 70 (hyper_exp -> super_exp .)
    PYC             reduce using rule 70 (hyper_exp -> super_exp .)
    AND             shift and go to state 132
    OR              shift and go to state 133

  ! MAYORQUE        [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! MENORQUE        [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! EQUALS          [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! DIFERENTE       [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! ID              [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! CTEINT          [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! CTEFLOAT        [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! AND             [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! OR              [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! MULT            [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! DIV             [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! MAS             [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! MENOS           [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! CORDER          [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! COMA            [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! PARDER          [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! DOSPUNTOS       [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! PYC             [ reduce using rule 71 (hyper_exp -> super_exp AND super_exp .) ]
  ! AND             [ reduce using rule 70 (hyper_exp -> super_exp .) ]
  ! OR              [ reduce using rule 70 (hyper_exp -> super_exp .) ]


state 172

    (72) hyper_exp -> super_exp OR super_exp .
    (70) hyper_exp -> super_exp .
    (71) hyper_exp -> super_exp . AND super_exp
    (72) hyper_exp -> super_exp . OR super_exp

  ! reduce/reduce conflict for MAYORQUE resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for MENORQUE resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for EQUALS resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for ID resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for CTEINT resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for CTEFLOAT resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for AND resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for OR resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for MULT resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for DIV resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for MAS resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for MENOS resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for CORDER resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for COMA resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for PARDER resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 70 (hyper_exp -> super_exp .)
  ! reduce/reduce conflict for PYC resolved using rule 70 (hyper_exp -> super_exp .)
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAYORQUE        reduce using rule 70 (hyper_exp -> super_exp .)
    MENORQUE        reduce using rule 70 (hyper_exp -> super_exp .)
    EQUALS          reduce using rule 70 (hyper_exp -> super_exp .)
    DIFERENTE       reduce using rule 70 (hyper_exp -> super_exp .)
    ID              reduce using rule 70 (hyper_exp -> super_exp .)
    CTEINT          reduce using rule 70 (hyper_exp -> super_exp .)
    CTEFLOAT        reduce using rule 70 (hyper_exp -> super_exp .)
    MULT            reduce using rule 70 (hyper_exp -> super_exp .)
    DIV             reduce using rule 70 (hyper_exp -> super_exp .)
    MAS             reduce using rule 70 (hyper_exp -> super_exp .)
    MENOS           reduce using rule 70 (hyper_exp -> super_exp .)
    CORDER          reduce using rule 70 (hyper_exp -> super_exp .)
    COMA            reduce using rule 70 (hyper_exp -> super_exp .)
    PARDER          reduce using rule 70 (hyper_exp -> super_exp .)
    DOSPUNTOS       reduce using rule 70 (hyper_exp -> super_exp .)
    PYC             reduce using rule 70 (hyper_exp -> super_exp .)
    AND             shift and go to state 132
    OR              shift and go to state 133

  ! MAYORQUE        [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! MENORQUE        [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! EQUALS          [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! DIFERENTE       [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! ID              [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! CTEINT          [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! CTEFLOAT        [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! AND             [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! OR              [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! MULT            [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! DIV             [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! MAS             [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! MENOS           [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! CORDER          [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! COMA            [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! PARDER          [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! DOSPUNTOS       [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! PYC             [ reduce using rule 72 (hyper_exp -> super_exp OR super_exp .) ]
  ! AND             [ reduce using rule 70 (hyper_exp -> super_exp .) ]
  ! OR              [ reduce using rule 70 (hyper_exp -> super_exp .) ]


state 173

    (40) asignaux -> CORIZQ expresion COMA expresion . CORDER
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! shift/reduce conflict for CORDER resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    CORDER          shift and go to state 182
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! CORDER          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 174

    (42) escritura -> write PARIZQ escaux PARDER PYC .

    ID              reduce using rule 42 (escritura -> write PARIZQ escaux PARDER PYC .)
    write           reduce using rule 42 (escritura -> write PARIZQ escaux PARDER PYC .)
    if              reduce using rule 42 (escritura -> write PARIZQ escaux PARDER PYC .)
    while           reduce using rule 42 (escritura -> write PARIZQ escaux PARDER PYC .)
    for             reduce using rule 42 (escritura -> write PARIZQ escaux PARDER PYC .)
    read            reduce using rule 42 (escritura -> write PARIZQ escaux PARDER PYC .)
    LLAVEDER        reduce using rule 42 (escritura -> write PARIZQ escaux PARDER PYC .)


state 175

    (46) nextexp -> COMA escaux .

    PARDER          reduce using rule 46 (nextexp -> COMA escaux .)


state 176

    (55) condicion -> if PARIZQ expresion PARDER bloque .
    (56) condicion -> if PARIZQ expresion PARDER bloque . else bloque

    ID              reduce using rule 55 (condicion -> if PARIZQ expresion PARDER bloque .)
    write           reduce using rule 55 (condicion -> if PARIZQ expresion PARDER bloque .)
    if              reduce using rule 55 (condicion -> if PARIZQ expresion PARDER bloque .)
    while           reduce using rule 55 (condicion -> if PARIZQ expresion PARDER bloque .)
    for             reduce using rule 55 (condicion -> if PARIZQ expresion PARDER bloque .)
    read            reduce using rule 55 (condicion -> if PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 55 (condicion -> if PARIZQ expresion PARDER bloque .)
    else            shift and go to state 183


state 177

    (57) whileloop -> while PARIZQ expresion PARDER bloque .

    ID              reduce using rule 57 (whileloop -> while PARIZQ expresion PARDER bloque .)
    write           reduce using rule 57 (whileloop -> while PARIZQ expresion PARDER bloque .)
    if              reduce using rule 57 (whileloop -> while PARIZQ expresion PARDER bloque .)
    while           reduce using rule 57 (whileloop -> while PARIZQ expresion PARDER bloque .)
    for             reduce using rule 57 (whileloop -> while PARIZQ expresion PARDER bloque .)
    read            reduce using rule 57 (whileloop -> while PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 57 (whileloop -> while PARIZQ expresion PARDER bloque .)


state 178

    (58) forloop -> for PARIZQ expresion DOSPUNTOS expresion . PARDER bloque
    (73) super_exp -> expresion .
    (74) super_exp -> expresion . MAYORQUE expresion
    (75) super_exp -> expresion . MENORQUE expresion
    (76) super_exp -> expresion . EQUALS expresion
    (77) super_exp -> expresion . DIFERENTE expresion

  ! shift/reduce conflict for PARDER resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
    PARDER          shift and go to state 184
    MULT            reduce using rule 73 (super_exp -> expresion .)
    DIV             reduce using rule 73 (super_exp -> expresion .)
    MAS             reduce using rule 73 (super_exp -> expresion .)
    MENOS           reduce using rule 73 (super_exp -> expresion .)
    AND             reduce using rule 73 (super_exp -> expresion .)
    OR              reduce using rule 73 (super_exp -> expresion .)
    MAYORQUE        shift and go to state 122
    MENORQUE        shift and go to state 123
    EQUALS          shift and go to state 124
    DIFERENTE       shift and go to state 125

  ! PARDER          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MAYORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! MENORQUE        [ reduce using rule 73 (super_exp -> expresion .) ]
  ! EQUALS          [ reduce using rule 73 (super_exp -> expresion .) ]
  ! DIFERENTE       [ reduce using rule 73 (super_exp -> expresion .) ]


state 179

    (59) lectura -> read PARIZQ ID PARDER PYC .

    ID              reduce using rule 59 (lectura -> read PARIZQ ID PARDER PYC .)
    write           reduce using rule 59 (lectura -> read PARIZQ ID PARDER PYC .)
    if              reduce using rule 59 (lectura -> read PARIZQ ID PARDER PYC .)
    while           reduce using rule 59 (lectura -> read PARIZQ ID PARDER PYC .)
    for             reduce using rule 59 (lectura -> read PARIZQ ID PARDER PYC .)
    read            reduce using rule 59 (lectura -> read PARIZQ ID PARDER PYC .)
    LLAVEDER        reduce using rule 59 (lectura -> read PARIZQ ID PARDER PYC .)


state 180

    (78) llamada_esp -> ID PUNTO especiales PARIZQ . PARDER

    PARDER          shift and go to state 185


state 181

    (53) nextparametro -> COMA llamaux .

    PARDER          reduce using rule 53 (nextparametro -> COMA llamaux .)


state 182

    (40) asignaux -> CORIZQ expresion COMA expresion CORDER .

    ASIGNA          reduce using rule 40 (asignaux -> CORIZQ expresion COMA expresion CORDER .)


state 183

    (56) condicion -> if PARIZQ expresion PARDER bloque else . bloque
    (16) bloque -> . LLAVEIZQ bloqueaux LLAVEDER
    (17) bloque -> . LLAVEIZQ empty LLAVEDER

    LLAVEIZQ        shift and go to state 50

    bloque                         shift and go to state 186

state 184

    (58) forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER . bloque
    (16) bloque -> . LLAVEIZQ bloqueaux LLAVEDER
    (17) bloque -> . LLAVEIZQ empty LLAVEDER

    LLAVEIZQ        shift and go to state 50

    bloque                         shift and go to state 187

state 185

    (78) llamada_esp -> ID PUNTO especiales PARIZQ PARDER .

    ID              reduce using rule 78 (llamada_esp -> ID PUNTO especiales PARIZQ PARDER .)
    CTEINT          reduce using rule 78 (llamada_esp -> ID PUNTO especiales PARIZQ PARDER .)
    CTEFLOAT        reduce using rule 78 (llamada_esp -> ID PUNTO especiales PARIZQ PARDER .)
    COMA            reduce using rule 78 (llamada_esp -> ID PUNTO especiales PARIZQ PARDER .)
    PARDER          reduce using rule 78 (llamada_esp -> ID PUNTO especiales PARIZQ PARDER .)
    PYC             reduce using rule 78 (llamada_esp -> ID PUNTO especiales PARIZQ PARDER .)


state 186

    (56) condicion -> if PARIZQ expresion PARDER bloque else bloque .

    ID              reduce using rule 56 (condicion -> if PARIZQ expresion PARDER bloque else bloque .)
    write           reduce using rule 56 (condicion -> if PARIZQ expresion PARDER bloque else bloque .)
    if              reduce using rule 56 (condicion -> if PARIZQ expresion PARDER bloque else bloque .)
    while           reduce using rule 56 (condicion -> if PARIZQ expresion PARDER bloque else bloque .)
    for             reduce using rule 56 (condicion -> if PARIZQ expresion PARDER bloque else bloque .)
    read            reduce using rule 56 (condicion -> if PARIZQ expresion PARDER bloque else bloque .)
    LLAVEDER        reduce using rule 56 (condicion -> if PARIZQ expresion PARDER bloque else bloque .)


state 187

    (58) forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque .

    ID              reduce using rule 58 (forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque .)
    write           reduce using rule 58 (forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque .)
    if              reduce using rule 58 (forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque .)
    while           reduce using rule 58 (forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque .)
    for             reduce using rule 58 (forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque .)
    read            reduce using rule 58 (forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque .)
    LLAVEDER        reduce using rule 58 (forloop -> for PARIZQ expresion DOSPUNTOS expresion PARDER bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for var in state 4 resolved as shift
WARNING: shift/reduce conflict for func in state 6 resolved as shift
WARNING: shift/reduce conflict for var in state 7 resolved as shift
WARNING: shift/reduce conflict for LLAVEIZQ in state 42 resolved as shift
WARNING: shift/reduce conflict for var in state 42 resolved as shift
WARNING: shift/reduce conflict for var in state 53 resolved as shift
WARNING: shift/reduce conflict for var in state 54 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 96 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 96 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 96 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 96 resolved as shift
WARNING: shift/reduce conflict for MAS in state 99 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 99 resolved as shift
WARNING: shift/reduce conflict for MULT in state 100 resolved as shift
WARNING: shift/reduce conflict for DIV in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for CORDER in state 105 resolved as shift
WARNING: shift/reduce conflict for COMA in state 105 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 105 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 105 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 105 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 108 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 108 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 108 resolved as shift
WARNING: shift/reduce conflict for COMA in state 108 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 111 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 111 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 111 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 111 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 112 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 112 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 112 resolved as shift
WARNING: shift/reduce conflict for DOSPUNTOS in state 113 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 113 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 113 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 113 resolved as shift
WARNING: shift/reduce conflict for PYC in state 116 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 118 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 118 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 118 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 120 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 120 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 120 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 120 resolved as shift
WARNING: shift/reduce conflict for COMA in state 120 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 161 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 161 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 161 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 161 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 162 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 162 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 162 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 162 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 163 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 163 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 163 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 163 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 164 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 164 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 164 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 164 resolved as shift
WARNING: shift/reduce conflict for MAS in state 167 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 167 resolved as shift
WARNING: shift/reduce conflict for MAS in state 168 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 168 resolved as shift
WARNING: shift/reduce conflict for MULT in state 169 resolved as shift
WARNING: shift/reduce conflict for DIV in state 169 resolved as shift
WARNING: shift/reduce conflict for MULT in state 170 resolved as shift
WARNING: shift/reduce conflict for DIV in state 170 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for OR in state 172 resolved as shift
WARNING: shift/reduce conflict for CORDER in state 173 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 173 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 173 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 173 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 173 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 178 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 178 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 178 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 178 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 178 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (varsaux -> empty)
WARNING: rejected rule (vars -> empty) in state 6
WARNING: reduce/reduce conflict in state 22 resolved using rule (varsaux -> empty)
WARNING: rejected rule (vars -> empty) in state 22
WARNING: reduce/reduce conflict in state 108 resolved using rule (super_exp -> expresion)
WARNING: rejected rule (empty -> <empty>) in state 108
WARNING: reduce/reduce conflict in state 120 resolved using rule (super_exp -> expresion)
WARNING: rejected rule (empty -> <empty>) in state 120
WARNING: reduce/reduce conflict in state 161 resolved using rule (super_exp -> expresion)
WARNING: rejected rule (super_exp -> expresion MAYORQUE expresion) in state 161
WARNING: reduce/reduce conflict in state 162 resolved using rule (super_exp -> expresion)
WARNING: rejected rule (super_exp -> expresion MENORQUE expresion) in state 162
WARNING: reduce/reduce conflict in state 163 resolved using rule (super_exp -> expresion)
WARNING: rejected rule (super_exp -> expresion EQUALS expresion) in state 163
WARNING: reduce/reduce conflict in state 164 resolved using rule (super_exp -> expresion)
WARNING: rejected rule (super_exp -> expresion DIFERENTE expresion) in state 164
WARNING: reduce/reduce conflict in state 167 resolved using rule (expresion -> term)
WARNING: rejected rule (expresion -> term MAS term) in state 167
WARNING: reduce/reduce conflict in state 168 resolved using rule (expresion -> term)
WARNING: rejected rule (expresion -> term MENOS term) in state 168
WARNING: reduce/reduce conflict in state 169 resolved using rule (term -> fact)
WARNING: rejected rule (term -> fact MULT fact) in state 169
WARNING: reduce/reduce conflict in state 170 resolved using rule (term -> fact)
WARNING: rejected rule (term -> fact DIV fact) in state 170
WARNING: reduce/reduce conflict in state 171 resolved using rule (hyper_exp -> super_exp)
WARNING: rejected rule (hyper_exp -> super_exp AND super_exp) in state 171
WARNING: reduce/reduce conflict in state 172 resolved using rule (hyper_exp -> super_exp)
WARNING: rejected rule (hyper_exp -> super_exp OR super_exp) in state 172
WARNING: Rule (super_exp -> expresion MAYORQUE expresion) is never reduced
WARNING: Rule (super_exp -> expresion MENORQUE expresion) is never reduced
WARNING: Rule (super_exp -> expresion EQUALS expresion) is never reduced
WARNING: Rule (super_exp -> expresion DIFERENTE expresion) is never reduced
WARNING: Rule (expresion -> term MAS term) is never reduced
WARNING: Rule (expresion -> term MENOS term) is never reduced
WARNING: Rule (term -> fact MULT fact) is never reduced
WARNING: Rule (term -> fact DIV fact) is never reduced
WARNING: Rule (hyper_exp -> super_exp AND super_exp) is never reduced
WARNING: Rule (hyper_exp -> super_exp OR super_exp) is never reduced

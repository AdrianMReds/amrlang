
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNA COMA CORDER CORIZQ CTEBOOL CTEFLOAT CTEINT CTESTRING DIFERENTE DIV DOSPUNTOS EQUALS ID LLAVEDER LLAVEIZQ MAS MAYORIGUAL MAYORQUE MENORIGUAL MENORQUE MENOS MULT OR PARDER PARIZQ PUNTO PYC avg bool else end false float for func if int length main max median min mode program read stdev string true var variance void while write\n    programa : program ID auxprograma PYC varsaux paux2 mainfunction end cuadEnd PYC\n    \n    cuadEnd :\n    \n    programa : program auxprograma ID PYC empty mainfunction end PYC\n    auxprograma :\n    \n    varsaux : vars varsaux\n            | empty\n    \n    paux2 : function paux2\n          | empty\n    \n    vars : var type vaux PYC\n         | empty\n    \n    vaux : ID agregaVar nextvar\n         | ID CORIZQ CTEINT CORDER agregaVar nextvar\n         | ID CORIZQ CTEINT COMA CTEINT CORDER agregaVar nextvar\n    \n    nextvar : COMA vaux\n            | empty\n    \n    agregaVar :\n    \n    guardarTipoVar :\n    \n    guardarTipoFunc :\n    \n    mainfunction : func main agregaFunc PARIZQ PARDER varsaux bloque\n                 | func main agregaFunc PARIZQ PARDER bloque\n    \n    agregaFunc :\n    \n    bloque : LLAVEIZQ bloqueaux LLAVEDER\n           | LLAVEIZQ empty LLAVEDER\n    \n    bloqueaux : estatuto bloqueaux\n              | estatuto\n    \n    type : int guardarTipoVar\n         | float guardarTipoVar\n         | string guardarTipoVar\n         | bool guardarTipoVar\n    \n    function : ftype func ID agregaFunc PARIZQ funcaux PARDER varsaux bloque\n             | ftype func ID agregaFunc PARIZQ empty PARDER varsaux bloque\n    \n    ftype : int guardarTipoFunc\n          | float guardarTipoFunc\n          | string guardarTipoFunc\n          | bool guardarTipoFunc\n          | void guardarTipoFunc\n    \n    funcaux : type ID agregaVar masParam\n            | type ID CORIZQ CTEINT CORDER agregaVar masParam\n            | type ID CORIZQ CTEINT COMA CTEINT CORDER agregaVar masParam\n    \n    masParam : funcaux\n             | empty\n    \n    estatuto : asignacion\n             | escritura\n             | llamada\n             | condicion\n             | whileloop\n             | forloop\n             | lectura\n    \n    asignacion : ID checkID asignaux ASIGNA expresion cuadAsignacion PYC\n               | ID checkID asignaux ASIGNA llamada_esp PYC\n               | ID checkID asignaux ASIGNA CTESTRING cuadAsignacion PYC\n    \n    checkID :\n    \n    cuadAsignacion :\n    \n    asignaux : CORIZQ expresion CORDER\n             | CORIZQ expresion COMA expresion CORDER\n             | empty\n    \n    escritura : write PARIZQ escaux PARDER PYC\n    \n    escaux : expresion cuadEsc nextexp\n           | CTESTRING cuadEsc nextexp\n           | llamada_esp nextexp\n    \n    cuadEsc :\n    \n    nextexp : COMA escaux\n            | empty\n    \n    llamada : ID PARIZQ expresion llamaux PARDER\n            | ID PARIZQ llamada_esp llamaux PARDER\n            | ID PARIZQ PARDER\n    \n    llamaux : expresion nextparametro\n            | llamada_esp nextparametro\n    \n    nextparametro : COMA llamaux\n                  | empty\n    \n    condicion : if PARIZQ expresion PARDER cuadGotof bloque condicionAux cuadFinIf\n    \n    condicionAux : else cuadGoto bloque\n                 | empty\n    \n    whileloop : while migaja PARIZQ expresion PARDER cuadGotof bloque cuadFinWhile\n    \n    migaja :\n    \n    cuadFinWhile :\n    \n    forloop : for PARIZQ expresion checkExpFor DOSPUNTOS expresion checkExpFor PARDER gotoFor bloque returnFor\n    \n    checkExpFor :\n    \n    gotoFor :\n    \n    returnFor :\n    \n    lectura : read PARIZQ ID checkID PARDER PYC\n    \n    expresion : andExpresion\n              | andExpresion OR pushOper andExpresion\n    \n    andExpresion : relopExpresion\n                 | relopExpresion AND pushOper relopExpresion\n    \n    relopExpresion : aritExpresion cuadArit\n                   | aritExpresion cuadArit relopAux aritExpresion cuadArit\n    \n    relopAux : MAYORQUE pushOper \n             | MENORQUE pushOper \n             | MAYORIGUAL pushOper\n             | MENORIGUAL pushOper\n             | EQUALS pushOper\n             | DIFERENTE pushOper\n    \n    aritExpresion : term cuadTerm\n                  | term cuadTerm aritAux term cuadTerm\n    \n    aritAux : MAS pushOper\n            | MENOS pushOper\n    \n    term : factor \n         | factor cuadFactor termAux factor cuadFactor\n    \n    termAux : MULT pushOper\n            | DIV pushOper\n    \n    factor : PARIZQ expresion PARDER\n           | CTEINT pushOT\n           | CTEFLOAT pushOT\n           | true pushOT\n           | false pushOT\n           | ID checkID pushOT\n           | llamada_esp pushOT\n    \n    llamada_esp : ID PUNTO especiales PARIZQ PARDER\n    \n    especiales : length\n               | max\n               | min\n               | avg\n               | median\n               | mode\n               | variance\n               | stdev\n    \n    pushOper :\n    \n    pushOT :\n    \n    cuadTerm :\n    \n    cuadFactor :\n    \n    cuadArit :\n    \n    cuadGotof : \n    \n    cuadFinIf :\n    \n    cuadGoto :\n    \n    empty : \n    '
    
_lr_action_items = {'program':([0,],[2,]),'$end':([1,52,61,],[0,-3,-1,]),'ID':([2,4,24,25,26,27,28,33,41,42,43,44,57,69,74,83,84,85,86,87,88,89,90,102,103,106,107,108,110,111,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,141,142,143,148,151,157,158,159,160,161,163,164,165,166,171,183,193,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,222,227,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,250,252,253,255,256,257,258,259,261,262,265,267,269,271,272,],[3,6,40,-17,-17,-17,-17,48,-26,-27,-28,-29,40,77,91,91,-42,-43,-44,-45,-46,-47,-48,-22,-23,122,122,141,141,145,141,-52,141,122,-66,122,-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,141,122,-119,-108,-118,-118,-86,-94,-103,-104,-105,-106,122,141,-107,-102,122,-64,-65,141,141,141,-118,-118,-118,-118,-118,-118,141,-118,-118,141,-118,-118,-57,141,-50,-83,-85,-122,-88,-89,-90,-91,-92,-93,-120,-96,-97,-121,-100,-101,-126,-81,-49,-51,-109,-87,-95,-99,-124,-73,-76,-71,-74,-72,-80,-77,]),'PYC':([3,5,6,39,40,45,47,50,54,56,58,63,64,70,78,79,101,118,122,127,128,129,130,131,132,133,134,135,141,142,151,157,160,161,163,164,165,166,167,179,180,181,193,194,223,226,228,232,233,234,241,244,255,256,257,258,],[-4,7,8,49,-16,52,-2,-126,61,-11,-15,-14,-16,-126,-12,-16,-126,-13,-52,-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,-119,-108,-86,-94,-103,-104,-105,-106,216,-53,227,-53,-107,-102,250,252,253,-83,-85,-122,-120,-121,-109,-87,-95,-99,]),'var':([7,10,11,49,66,75,76,],[12,12,-10,-9,12,12,12,]),'int':([7,9,10,11,12,15,23,49,62,77,99,102,103,112,113,146,177,225,251,],[-126,18,-126,-6,25,18,-5,-9,25,-16,25,-22,-23,-30,-31,-16,25,-16,25,]),'float':([7,9,10,11,12,15,23,49,62,77,99,102,103,112,113,146,177,225,251,],[-126,19,-126,-6,26,19,-5,-9,26,-16,26,-22,-23,-30,-31,-16,26,-16,26,]),'string':([7,9,10,11,12,15,23,49,62,77,99,102,103,112,113,146,177,225,251,],[-126,20,-126,-6,27,20,-5,-9,27,-16,27,-22,-23,-30,-31,-16,27,-16,27,]),'bool':([7,9,10,11,12,15,23,49,62,77,99,102,103,112,113,146,177,225,251,],[-126,21,-126,-6,28,21,-5,-9,28,-16,28,-22,-23,-30,-31,-16,28,-16,28,]),'void':([7,9,10,11,15,23,49,102,103,112,113,],[-126,22,-126,-6,22,-5,-9,-22,-23,-30,-31,]),'func':([7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,32,34,35,36,37,38,49,102,103,112,113,],[-126,-126,-126,-126,-6,30,30,-126,-8,33,-18,-18,-18,-18,-18,-5,-7,-32,-33,-34,-35,-36,-9,-22,-23,-30,-31,]),'LLAVEIZQ':([10,11,23,49,66,72,75,76,97,98,173,220,221,248,260,266,268,270,],[-126,-6,-5,-9,74,74,-126,-126,74,74,-123,74,-123,74,-125,74,-79,74,]),'end':([29,31,73,80,102,103,],[45,47,-20,-19,-22,-23,]),'main':([30,],[46,]),'CORIZQ':([40,77,91,105,],[51,100,-52,120,]),'COMA':([40,50,59,64,70,79,101,117,122,126,127,128,129,130,131,132,133,134,135,137,138,139,141,142,149,151,153,155,157,160,161,163,164,165,166,168,169,193,194,232,233,234,241,244,255,256,257,258,],[-16,57,65,-16,57,-16,57,147,-52,-119,-82,-84,-122,-120,-98,-119,-119,-119,-119,-61,-61,171,-52,-119,183,-119,196,196,-108,-86,-94,-103,-104,-105,-106,171,171,-107,-102,-83,-85,-122,-120,-121,-109,-87,-95,-99,]),'PARIZQ':([46,48,53,55,91,92,93,94,95,96,106,107,108,109,110,120,122,123,124,126,127,128,129,130,131,132,133,134,135,141,142,143,148,151,157,158,159,160,161,163,164,165,166,171,183,184,185,186,187,188,189,190,191,192,193,194,196,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,222,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,255,256,257,258,],[-21,-21,60,62,106,107,108,-75,110,111,123,123,123,143,123,123,-52,123,123,123,-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,123,123,-119,-108,-118,-118,-86,-94,-103,-104,-105,-106,123,123,230,-110,-111,-112,-113,-114,-115,-116,-117,-107,-102,123,123,123,123,-118,-118,-118,-118,-118,-118,123,-118,-118,123,-118,-118,123,-83,-85,-122,-88,-89,-90,-91,-92,-93,-120,-96,-97,-121,-100,-101,-109,-87,-95,-99,]),'CTEINT':([51,65,100,106,107,108,110,120,122,123,124,126,127,128,129,130,131,132,133,134,135,141,142,143,147,148,151,157,158,159,160,161,163,164,165,166,171,183,193,194,196,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,222,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,255,256,257,258,],[59,71,117,132,132,132,132,132,-52,132,132,132,-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,132,178,132,-119,-108,-118,-118,-86,-94,-103,-104,-105,-106,132,132,-107,-102,132,132,132,132,-118,-118,-118,-118,-118,-118,132,-118,-118,132,-118,-118,132,-83,-85,-122,-88,-89,-90,-91,-92,-93,-120,-96,-97,-121,-100,-101,-109,-87,-95,-99,]),'CORDER':([59,71,117,127,128,129,130,131,132,133,134,135,141,142,149,151,157,160,161,163,164,165,166,178,193,194,229,232,233,234,241,244,255,256,257,258,],[64,79,146,-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,182,-119,-108,-86,-94,-103,-104,-105,-106,225,-107,-102,254,-83,-85,-122,-120,-121,-109,-87,-95,-99,]),'PARDER':([60,62,67,68,77,99,106,114,115,116,122,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,146,151,152,153,154,155,156,157,160,161,163,164,165,166,168,169,170,172,174,176,177,193,194,195,197,199,217,218,219,224,225,230,231,232,233,234,241,244,249,251,255,256,257,258,263,264,],[66,-126,75,76,-16,-126,125,-37,-40,-41,-52,-119,-82,-84,-122,-120,-98,-119,-119,-119,-119,167,-61,-61,-119,173,-52,-119,-52,-16,-119,194,-126,198,-119,200,-108,-86,-94,-103,-104,-105,-106,-126,-126,-60,-63,221,223,-126,-107,-102,-67,-70,-68,-58,-59,-62,-38,-16,255,-69,-83,-85,-122,-120,-121,-78,-126,-109,-87,-95,-99,268,-39,]),'LLAVEDER':([74,81,82,83,84,85,86,87,88,89,90,102,103,104,125,198,200,216,227,247,250,252,253,259,261,262,265,267,269,271,272,],[-126,102,103,-25,-42,-43,-44,-45,-46,-47,-48,-22,-23,-24,-66,-64,-65,-57,-50,-126,-81,-49,-51,-124,-73,-76,-71,-74,-72,-80,-77,]),'write':([74,83,84,85,86,87,88,89,90,102,103,125,198,200,216,227,247,250,252,253,259,261,262,265,267,269,271,272,],[92,92,-42,-43,-44,-45,-46,-47,-48,-22,-23,-66,-64,-65,-57,-50,-126,-81,-49,-51,-124,-73,-76,-71,-74,-72,-80,-77,]),'if':([74,83,84,85,86,87,88,89,90,102,103,125,198,200,216,227,247,250,252,253,259,261,262,265,267,269,271,272,],[93,93,-42,-43,-44,-45,-46,-47,-48,-22,-23,-66,-64,-65,-57,-50,-126,-81,-49,-51,-124,-73,-76,-71,-74,-72,-80,-77,]),'while':([74,83,84,85,86,87,88,89,90,102,103,125,198,200,216,227,247,250,252,253,259,261,262,265,267,269,271,272,],[94,94,-42,-43,-44,-45,-46,-47,-48,-22,-23,-66,-64,-65,-57,-50,-126,-81,-49,-51,-124,-73,-76,-71,-74,-72,-80,-77,]),'for':([74,83,84,85,86,87,88,89,90,102,103,125,198,200,216,227,247,250,252,253,259,261,262,265,267,269,271,272,],[95,95,-42,-43,-44,-45,-46,-47,-48,-22,-23,-66,-64,-65,-57,-50,-126,-81,-49,-51,-124,-73,-76,-71,-74,-72,-80,-77,]),'read':([74,83,84,85,86,87,88,89,90,102,103,125,198,200,216,227,247,250,252,253,259,261,262,265,267,269,271,272,],[96,96,-42,-43,-44,-45,-46,-47,-48,-22,-23,-66,-64,-65,-57,-50,-126,-81,-49,-51,-124,-73,-76,-71,-74,-72,-80,-77,]),'ASIGNA':([91,105,119,121,182,254,],[-52,-126,148,-56,-54,-55,]),'else':([102,103,247,],[-22,-23,260,]),'CTEFLOAT':([106,107,108,110,120,122,123,124,126,127,128,129,130,131,132,133,134,135,141,142,143,148,151,157,158,159,160,161,163,164,165,166,171,183,193,194,196,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,222,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,255,256,257,258,],[133,133,133,133,133,-52,133,133,133,-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,133,133,-119,-108,-118,-118,-86,-94,-103,-104,-105,-106,133,133,-107,-102,133,133,133,133,-118,-118,-118,-118,-118,-118,133,-118,-118,133,-118,-118,133,-83,-85,-122,-88,-89,-90,-91,-92,-93,-120,-96,-97,-121,-100,-101,-109,-87,-95,-99,]),'true':([106,107,108,110,120,122,123,124,126,127,128,129,130,131,132,133,134,135,141,142,143,148,151,157,158,159,160,161,163,164,165,166,171,183,193,194,196,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,222,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,255,256,257,258,],[134,134,134,134,134,-52,134,134,134,-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,134,134,-119,-108,-118,-118,-86,-94,-103,-104,-105,-106,134,134,-107,-102,134,134,134,134,-118,-118,-118,-118,-118,-118,134,-118,-118,134,-118,-118,134,-83,-85,-122,-88,-89,-90,-91,-92,-93,-120,-96,-97,-121,-100,-101,-109,-87,-95,-99,]),'false':([106,107,108,110,120,122,123,124,126,127,128,129,130,131,132,133,134,135,141,142,143,148,151,157,158,159,160,161,163,164,165,166,171,183,193,194,196,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,222,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,255,256,257,258,],[135,135,135,135,135,-52,135,135,135,-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,135,135,-119,-108,-118,-118,-86,-94,-103,-104,-105,-106,135,135,-107,-102,135,135,135,135,-118,-118,-118,-118,-118,-118,135,-118,-118,135,-118,-118,135,-83,-85,-122,-88,-89,-90,-91,-92,-93,-120,-96,-97,-121,-100,-101,-109,-87,-95,-99,]),'CTESTRING':([107,148,171,],[138,181,138,]),'PUNTO':([122,141,],[150,150,]),'MULT':([122,126,131,132,133,134,135,139,141,142,151,155,157,162,163,164,165,166,180,193,194,255,],[-52,-119,-121,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,214,-103,-104,-105,-106,-119,-107,-102,-109,]),'DIV':([122,126,131,132,133,134,135,139,141,142,151,155,157,162,163,164,165,166,180,193,194,255,],[-52,-119,-121,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,215,-103,-104,-105,-106,-119,-107,-102,-109,]),'MAS':([122,126,130,131,132,133,134,135,139,141,142,151,155,157,161,163,164,165,166,180,193,194,244,255,258,],[-52,-119,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,211,-103,-104,-105,-106,-119,-107,-102,-121,-109,-99,]),'MENOS':([122,126,130,131,132,133,134,135,139,141,142,151,155,157,161,163,164,165,166,180,193,194,244,255,258,],[-52,-119,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,212,-103,-104,-105,-106,-119,-107,-102,-121,-109,-99,]),'MAYORQUE':([122,126,129,130,131,132,133,134,135,139,141,142,151,155,157,160,161,163,164,165,166,180,193,194,241,244,255,257,258,],[-52,-119,-122,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,204,-94,-103,-104,-105,-106,-119,-107,-102,-120,-121,-109,-95,-99,]),'MENORQUE':([122,126,129,130,131,132,133,134,135,139,141,142,151,155,157,160,161,163,164,165,166,180,193,194,241,244,255,257,258,],[-52,-119,-122,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,205,-94,-103,-104,-105,-106,-119,-107,-102,-120,-121,-109,-95,-99,]),'MAYORIGUAL':([122,126,129,130,131,132,133,134,135,139,141,142,151,155,157,160,161,163,164,165,166,180,193,194,241,244,255,257,258,],[-52,-119,-122,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,206,-94,-103,-104,-105,-106,-119,-107,-102,-120,-121,-109,-95,-99,]),'MENORIGUAL':([122,126,129,130,131,132,133,134,135,139,141,142,151,155,157,160,161,163,164,165,166,180,193,194,241,244,255,257,258,],[-52,-119,-122,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,207,-94,-103,-104,-105,-106,-119,-107,-102,-120,-121,-109,-95,-99,]),'EQUALS':([122,126,129,130,131,132,133,134,135,139,141,142,151,155,157,160,161,163,164,165,166,180,193,194,241,244,255,257,258,],[-52,-119,-122,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,208,-94,-103,-104,-105,-106,-119,-107,-102,-120,-121,-109,-95,-99,]),'DIFERENTE':([122,126,129,130,131,132,133,134,135,139,141,142,151,155,157,160,161,163,164,165,166,180,193,194,241,244,255,257,258,],[-52,-119,-122,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,209,-94,-103,-104,-105,-106,-119,-107,-102,-120,-121,-109,-95,-99,]),'AND':([122,126,128,129,130,131,132,133,134,135,139,141,142,151,155,157,160,161,163,164,165,166,180,193,194,234,241,244,255,256,257,258,],[-52,-119,159,-122,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,-86,-94,-103,-104,-105,-106,-119,-107,-102,-122,-120,-121,-109,-87,-95,-99,]),'OR':([122,126,127,128,129,130,131,132,133,134,135,139,141,142,151,155,157,160,161,163,164,165,166,180,193,194,233,234,241,244,255,256,257,258,],[-52,-119,158,-84,-122,-120,-98,-119,-119,-119,-119,-119,-52,-119,-119,-119,-108,-86,-94,-103,-104,-105,-106,-119,-107,-102,-85,-122,-120,-121,-109,-87,-95,-99,]),'DOSPUNTOS':([127,128,129,130,131,132,133,134,135,141,142,144,151,157,160,161,163,164,165,166,175,193,194,232,233,234,241,244,255,256,257,258,],[-82,-84,-122,-120,-98,-119,-119,-119,-119,-52,-119,-78,-119,-108,-86,-94,-103,-104,-105,-106,222,-107,-102,-83,-85,-122,-120,-121,-109,-87,-95,-99,]),'length':([150,],[185,]),'max':([150,],[186,]),'min':([150,],[187,]),'avg':([150,],[188,]),'median':([150,],[189,]),'mode':([150,],[190,]),'variance':([150,],[191,]),'stdev':([150,],[192,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'auxprograma':([2,3,],[4,5,]),'varsaux':([7,10,66,75,76,],[9,23,72,97,98,]),'vars':([7,10,66,75,76,],[10,10,10,10,10,]),'empty':([7,8,9,10,15,50,62,66,70,74,75,76,99,101,105,139,153,155,168,169,177,247,251,],[11,13,16,11,16,58,68,11,58,82,11,11,116,58,121,172,197,197,172,172,116,261,116,]),'paux2':([9,15,],[14,32,]),'function':([9,15,],[15,15,]),'ftype':([9,15,],[17,17,]),'type':([12,62,99,177,251,],[24,69,69,69,69,]),'mainfunction':([13,14,],[29,31,]),'guardarTipoFunc':([18,19,20,21,22,],[34,35,36,37,38,]),'vaux':([24,57,],[39,63,]),'guardarTipoVar':([25,26,27,28,],[41,42,43,44,]),'agregaVar':([40,64,77,79,146,225,],[50,70,99,101,177,251,]),'agregaFunc':([46,48,],[53,55,]),'cuadEnd':([47,],[54,]),'nextvar':([50,70,101,],[56,78,118,]),'funcaux':([62,99,177,251,],[67,115,115,115,]),'bloque':([66,72,97,98,220,248,266,270,],[73,80,112,113,247,262,269,271,]),'bloqueaux':([74,83,],[81,104,]),'estatuto':([74,83,],[83,83,]),'asignacion':([74,83,],[84,84,]),'escritura':([74,83,],[85,85,]),'llamada':([74,83,],[86,86,]),'condicion':([74,83,],[87,87,]),'whileloop':([74,83,],[88,88,]),'forloop':([74,83,],[89,89,]),'lectura':([74,83,],[90,90,]),'checkID':([91,122,141,145,],[105,151,151,176,]),'migaja':([94,],[109,]),'masParam':([99,177,251,],[114,224,264,]),'asignaux':([105,],[119,]),'expresion':([106,107,108,110,120,123,124,126,143,148,171,183,196,222,],[124,137,140,144,149,152,153,153,174,179,137,229,153,249,]),'llamada_esp':([106,107,108,110,120,123,124,126,143,148,171,183,196,201,202,203,210,213,222,],[126,139,142,142,142,142,155,155,142,180,139,142,155,142,142,142,142,142,142,]),'andExpresion':([106,107,108,110,120,123,124,126,143,148,171,183,196,201,222,],[127,127,127,127,127,127,127,127,127,127,127,127,127,232,127,]),'relopExpresion':([106,107,108,110,120,123,124,126,143,148,171,183,196,201,202,222,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,233,128,]),'aritExpresion':([106,107,108,110,120,123,124,126,143,148,171,183,196,201,202,203,222,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,234,129,]),'term':([106,107,108,110,120,123,124,126,143,148,171,183,196,201,202,203,210,222,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,241,130,]),'factor':([106,107,108,110,120,123,124,126,143,148,171,183,196,201,202,203,210,213,222,],[131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,244,131,]),'escaux':([107,171,],[136,219,]),'llamaux':([124,126,196,],[154,156,231,]),'pushOT':([126,132,133,134,135,139,142,151,155,180,],[157,163,164,165,166,157,157,193,157,157,]),'cuadArit':([129,234,],[160,256,]),'cuadTerm':([130,241,],[161,257,]),'cuadFactor':([131,244,],[162,258,]),'cuadEsc':([137,138,],[168,169,]),'nextexp':([139,168,169,],[170,217,218,]),'checkExpFor':([144,249,],[175,263,]),'especiales':([150,],[184,]),'nextparametro':([153,155,],[195,199,]),'pushOper':([158,159,204,205,206,207,208,209,211,212,214,215,],[201,202,235,236,237,238,239,240,242,243,245,246,]),'relopAux':([160,],[203,]),'aritAux':([161,],[210,]),'termAux':([162,],[213,]),'cuadGotof':([173,221,],[220,248,]),'cuadAsignacion':([179,181,],[226,228,]),'condicionAux':([247,],[259,]),'cuadFinIf':([259,],[265,]),'cuadGoto':([260,],[266,]),'cuadFinWhile':([262,],[267,]),'gotoFor':([268,],[270,]),'returnFor':([271,],[272,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> program ID auxprograma PYC varsaux paux2 mainfunction end cuadEnd PYC','programa',10,'p_programa','amrlang.py',167),
  ('cuadEnd -> <empty>','cuadEnd',0,'p_cuadEnd','amrlang.py',172),
  ('programa -> program auxprograma ID PYC empty mainfunction end PYC','programa',8,'p_programa_vacio','amrlang.py',181),
  ('auxprograma -> <empty>','auxprograma',0,'p_auxprograma','amrlang.py',185),
  ('varsaux -> vars varsaux','varsaux',2,'p_varsaux','amrlang.py',196),
  ('varsaux -> empty','varsaux',1,'p_varsaux','amrlang.py',197),
  ('paux2 -> function paux2','paux2',2,'p_paux2','amrlang.py',202),
  ('paux2 -> empty','paux2',1,'p_paux2','amrlang.py',203),
  ('vars -> var type vaux PYC','vars',4,'p_vars','amrlang.py',208),
  ('vars -> empty','vars',1,'p_vars','amrlang.py',209),
  ('vaux -> ID agregaVar nextvar','vaux',3,'p_vaux','amrlang.py',214),
  ('vaux -> ID CORIZQ CTEINT CORDER agregaVar nextvar','vaux',6,'p_vaux','amrlang.py',215),
  ('vaux -> ID CORIZQ CTEINT COMA CTEINT CORDER agregaVar nextvar','vaux',8,'p_vaux','amrlang.py',216),
  ('nextvar -> COMA vaux','nextvar',2,'p_nextvar','amrlang.py',221),
  ('nextvar -> empty','nextvar',1,'p_nextvar','amrlang.py',222),
  ('agregaVar -> <empty>','agregaVar',0,'p_agregaVar','amrlang.py',227),
  ('guardarTipoVar -> <empty>','guardarTipoVar',0,'p_guardarTipoVar','amrlang.py',251),
  ('guardarTipoFunc -> <empty>','guardarTipoFunc',0,'p_guardarTipoFunc','amrlang.py',258),
  ('mainfunction -> func main agregaFunc PARIZQ PARDER varsaux bloque','mainfunction',7,'p_mainfunction','amrlang.py',265),
  ('mainfunction -> func main agregaFunc PARIZQ PARDER bloque','mainfunction',6,'p_mainfunction','amrlang.py',266),
  ('agregaFunc -> <empty>','agregaFunc',0,'p_agregaFunc','amrlang.py',271),
  ('bloque -> LLAVEIZQ bloqueaux LLAVEDER','bloque',3,'p_bloque','amrlang.py',285),
  ('bloque -> LLAVEIZQ empty LLAVEDER','bloque',3,'p_bloque','amrlang.py',286),
  ('bloqueaux -> estatuto bloqueaux','bloqueaux',2,'p_bloqueaux','amrlang.py',291),
  ('bloqueaux -> estatuto','bloqueaux',1,'p_bloqueaux','amrlang.py',292),
  ('type -> int guardarTipoVar','type',2,'p_type','amrlang.py',297),
  ('type -> float guardarTipoVar','type',2,'p_type','amrlang.py',298),
  ('type -> string guardarTipoVar','type',2,'p_type','amrlang.py',299),
  ('type -> bool guardarTipoVar','type',2,'p_type','amrlang.py',300),
  ('function -> ftype func ID agregaFunc PARIZQ funcaux PARDER varsaux bloque','function',9,'p_function','amrlang.py',305),
  ('function -> ftype func ID agregaFunc PARIZQ empty PARDER varsaux bloque','function',9,'p_function','amrlang.py',306),
  ('ftype -> int guardarTipoFunc','ftype',2,'p_ftype','amrlang.py',312),
  ('ftype -> float guardarTipoFunc','ftype',2,'p_ftype','amrlang.py',313),
  ('ftype -> string guardarTipoFunc','ftype',2,'p_ftype','amrlang.py',314),
  ('ftype -> bool guardarTipoFunc','ftype',2,'p_ftype','amrlang.py',315),
  ('ftype -> void guardarTipoFunc','ftype',2,'p_ftype','amrlang.py',316),
  ('funcaux -> type ID agregaVar masParam','funcaux',4,'p_funcaux','amrlang.py',321),
  ('funcaux -> type ID CORIZQ CTEINT CORDER agregaVar masParam','funcaux',7,'p_funcaux','amrlang.py',322),
  ('funcaux -> type ID CORIZQ CTEINT COMA CTEINT CORDER agregaVar masParam','funcaux',9,'p_funcaux','amrlang.py',323),
  ('masParam -> funcaux','masParam',1,'p_masParam','amrlang.py',328),
  ('masParam -> empty','masParam',1,'p_masParam','amrlang.py',329),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','amrlang.py',334),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','amrlang.py',335),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','amrlang.py',336),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','amrlang.py',337),
  ('estatuto -> whileloop','estatuto',1,'p_estatuto','amrlang.py',338),
  ('estatuto -> forloop','estatuto',1,'p_estatuto','amrlang.py',339),
  ('estatuto -> lectura','estatuto',1,'p_estatuto','amrlang.py',340),
  ('asignacion -> ID checkID asignaux ASIGNA expresion cuadAsignacion PYC','asignacion',7,'p_asignacion','amrlang.py',345),
  ('asignacion -> ID checkID asignaux ASIGNA llamada_esp PYC','asignacion',6,'p_asignacion','amrlang.py',346),
  ('asignacion -> ID checkID asignaux ASIGNA CTESTRING cuadAsignacion PYC','asignacion',7,'p_asignacion','amrlang.py',347),
  ('checkID -> <empty>','checkID',0,'p_checkID','amrlang.py',352),
  ('cuadAsignacion -> <empty>','cuadAsignacion',0,'p_cuadAsignacion','amrlang.py',377),
  ('asignaux -> CORIZQ expresion CORDER','asignaux',3,'p_asignaux','amrlang.py',393),
  ('asignaux -> CORIZQ expresion COMA expresion CORDER','asignaux',5,'p_asignaux','amrlang.py',394),
  ('asignaux -> empty','asignaux',1,'p_asignaux','amrlang.py',395),
  ('escritura -> write PARIZQ escaux PARDER PYC','escritura',5,'p_escritura','amrlang.py',400),
  ('escaux -> expresion cuadEsc nextexp','escaux',3,'p_escaux','amrlang.py',405),
  ('escaux -> CTESTRING cuadEsc nextexp','escaux',3,'p_escaux','amrlang.py',406),
  ('escaux -> llamada_esp nextexp','escaux',2,'p_escaux','amrlang.py',407),
  ('cuadEsc -> <empty>','cuadEsc',0,'p_cuadEsc','amrlang.py',412),
  ('nextexp -> COMA escaux','nextexp',2,'p_nextexp','amrlang.py',431),
  ('nextexp -> empty','nextexp',1,'p_nextexp','amrlang.py',432),
  ('llamada -> ID PARIZQ expresion llamaux PARDER','llamada',5,'p_llamada','amrlang.py',437),
  ('llamada -> ID PARIZQ llamada_esp llamaux PARDER','llamada',5,'p_llamada','amrlang.py',438),
  ('llamada -> ID PARIZQ PARDER','llamada',3,'p_llamada','amrlang.py',439),
  ('llamaux -> expresion nextparametro','llamaux',2,'p_llamaux','amrlang.py',444),
  ('llamaux -> llamada_esp nextparametro','llamaux',2,'p_llamaux','amrlang.py',445),
  ('nextparametro -> COMA llamaux','nextparametro',2,'p_nextparametro','amrlang.py',450),
  ('nextparametro -> empty','nextparametro',1,'p_nextparametro','amrlang.py',451),
  ('condicion -> if PARIZQ expresion PARDER cuadGotof bloque condicionAux cuadFinIf','condicion',8,'p_condicion','amrlang.py',456),
  ('condicionAux -> else cuadGoto bloque','condicionAux',3,'p_condicionAux','amrlang.py',461),
  ('condicionAux -> empty','condicionAux',1,'p_condicionAux','amrlang.py',462),
  ('whileloop -> while migaja PARIZQ expresion PARDER cuadGotof bloque cuadFinWhile','whileloop',8,'p_whileloop','amrlang.py',467),
  ('migaja -> <empty>','migaja',0,'p_migaja','amrlang.py',472),
  ('cuadFinWhile -> <empty>','cuadFinWhile',0,'p_cuadFinWhile','amrlang.py',480),
  ('forloop -> for PARIZQ expresion checkExpFor DOSPUNTOS expresion checkExpFor PARDER gotoFor bloque returnFor','forloop',11,'p_forloop','amrlang.py',495),
  ('checkExpFor -> <empty>','checkExpFor',0,'p_checkExpFor','amrlang.py',500),
  ('gotoFor -> <empty>','gotoFor',0,'p_gotoFor','amrlang.py',516),
  ('returnFor -> <empty>','returnFor',0,'p_returnFor','amrlang.py',575),
  ('lectura -> read PARIZQ ID checkID PARDER PYC','lectura',6,'p_lectura','amrlang.py',616),
  ('expresion -> andExpresion','expresion',1,'p_expresion','amrlang.py',621),
  ('expresion -> andExpresion OR pushOper andExpresion','expresion',4,'p_expresion','amrlang.py',622),
  ('andExpresion -> relopExpresion','andExpresion',1,'p_andExpresion','amrlang.py',627),
  ('andExpresion -> relopExpresion AND pushOper relopExpresion','andExpresion',4,'p_andExpresion','amrlang.py',628),
  ('relopExpresion -> aritExpresion cuadArit','relopExpresion',2,'p_relopExpresion','amrlang.py',633),
  ('relopExpresion -> aritExpresion cuadArit relopAux aritExpresion cuadArit','relopExpresion',5,'p_relopExpresion','amrlang.py',634),
  ('relopAux -> MAYORQUE pushOper','relopAux',2,'p_relopAux','amrlang.py',639),
  ('relopAux -> MENORQUE pushOper','relopAux',2,'p_relopAux','amrlang.py',640),
  ('relopAux -> MAYORIGUAL pushOper','relopAux',2,'p_relopAux','amrlang.py',641),
  ('relopAux -> MENORIGUAL pushOper','relopAux',2,'p_relopAux','amrlang.py',642),
  ('relopAux -> EQUALS pushOper','relopAux',2,'p_relopAux','amrlang.py',643),
  ('relopAux -> DIFERENTE pushOper','relopAux',2,'p_relopAux','amrlang.py',644),
  ('aritExpresion -> term cuadTerm','aritExpresion',2,'p_aritExpresion','amrlang.py',649),
  ('aritExpresion -> term cuadTerm aritAux term cuadTerm','aritExpresion',5,'p_aritExpresion','amrlang.py',650),
  ('aritAux -> MAS pushOper','aritAux',2,'p_aritAux','amrlang.py',655),
  ('aritAux -> MENOS pushOper','aritAux',2,'p_aritAux','amrlang.py',656),
  ('term -> factor','term',1,'p_term','amrlang.py',661),
  ('term -> factor cuadFactor termAux factor cuadFactor','term',5,'p_term','amrlang.py',662),
  ('termAux -> MULT pushOper','termAux',2,'p_termAux','amrlang.py',667),
  ('termAux -> DIV pushOper','termAux',2,'p_termAux','amrlang.py',668),
  ('factor -> PARIZQ expresion PARDER','factor',3,'p_factor','amrlang.py',673),
  ('factor -> CTEINT pushOT','factor',2,'p_factor','amrlang.py',674),
  ('factor -> CTEFLOAT pushOT','factor',2,'p_factor','amrlang.py',675),
  ('factor -> true pushOT','factor',2,'p_factor','amrlang.py',676),
  ('factor -> false pushOT','factor',2,'p_factor','amrlang.py',677),
  ('factor -> ID checkID pushOT','factor',3,'p_factor','amrlang.py',678),
  ('factor -> llamada_esp pushOT','factor',2,'p_factor','amrlang.py',679),
  ('llamada_esp -> ID PUNTO especiales PARIZQ PARDER','llamada_esp',5,'p_llamada_esp','amrlang.py',684),
  ('especiales -> length','especiales',1,'p_especiales','amrlang.py',689),
  ('especiales -> max','especiales',1,'p_especiales','amrlang.py',690),
  ('especiales -> min','especiales',1,'p_especiales','amrlang.py',691),
  ('especiales -> avg','especiales',1,'p_especiales','amrlang.py',692),
  ('especiales -> median','especiales',1,'p_especiales','amrlang.py',693),
  ('especiales -> mode','especiales',1,'p_especiales','amrlang.py',694),
  ('especiales -> variance','especiales',1,'p_especiales','amrlang.py',695),
  ('especiales -> stdev','especiales',1,'p_especiales','amrlang.py',696),
  ('pushOper -> <empty>','pushOper',0,'p_pushOper','amrlang.py',701),
  ('pushOT -> <empty>','pushOT',0,'p_pushOT','amrlang.py',708),
  ('cuadTerm -> <empty>','cuadTerm',0,'p_cuadTerm','amrlang.py',747),
  ('cuadFactor -> <empty>','cuadFactor',0,'p_cuadFactor','amrlang.py',784),
  ('cuadArit -> <empty>','cuadArit',0,'p_cuadArit','amrlang.py',824),
  ('cuadGotof -> <empty>','cuadGotof',0,'p_cuadGotof','amrlang.py',863),
  ('cuadFinIf -> <empty>','cuadFinIf',0,'p_cuadFinIf','amrlang.py',884),
  ('cuadGoto -> <empty>','cuadGoto',0,'p_cuadGoto','amrlang.py',893),
  ('empty -> <empty>','empty',0,'p_empty','amrlang.py',911),
]

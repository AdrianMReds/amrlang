
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNA COMA CORDER CORIZQ CTEFLOAT CTEINT CTESTRING DIFERENTE DIV DOSPUNTOS EQUALS ID LLAVEDER LLAVEIZQ MAS MAYORQUE MENORQUE MENOS MULT OR PARDER PARIZQ PYC else float for func if input int main print program string var while\n    programa : program ID PYC paux paux2 mainfunction\n    \n    programa : program ID PYC empty mainfunction\n    \n    paux : vars\n         | empty\n    \n    paux2 : function\n          | empty\n    \n    vars : var type vaux PYC vars\n         | empty\n    \n    vaux : ID\n         | ID CORIZQ CTEINT CORDER nextvar\n         | ID CORIZQ CTEINT COMA CTEINT CORDER nextvar\n    \n    nextvar : COMA vaux\n            | empty\n    \n    mainfunction : func main PARIZQ PARDER vars bloque\n                 | func main PARIZQ PARDER bloque\n    \n    bloque : LLAVEIZQ bloqueaux LLAVEDER\n           | LLAVEIZQ empty LLAVEDER\n    \n    bloqueaux : estatuto bloqueaux\n              | estatuto\n    \n    type : int\n         | float\n         | string\n    \n    function : type ID PARIZQ funcaux PARDER vars bloque\n             | type ID PARIZQ empty PARDER vars bloque\n    \n    funcaux : type ID \n            | type ID COMA funcaux\n    \n    estatuto : asignacion\n             | escritura\n             | llamada\n             | condicion\n             | whileloop\n             | forloop\n             | lectura\n    \n    asignacion : ID asignaux ASIGNA hyper_exp PYC\n    \n    asignaux : CORIZQ expresion CORDER\n             | CORIZQ expresion COMA expresion CORDER\n             | empty\n    \n    escritura : print PARIZQ escaux PARDER PYC\n    \n    escaux : expresion nextexp\n           | CTESTRING nextexp\n    \n    nextexp : COMA expresion\n            | empty\n    \n    llamada : ID PARIZQ expresion nextexp PARDER\n            | ID PARIZQ PARDER\n    \n    condicion : if PARIZQ expresion PARDER bloque\n              | if PARIZQ expresion PARDER bloque else bloque\n    \n    whileloop : while PARIZQ expresion PARDER bloque\n    \n    forloop : for PARIZQ CTEINT DOSPUNTOS CTEINT PARDER bloque\n    \n    lectura : input PARIZQ ID PARDER PYC\n    \n    expresion : term \n              | term MAS term\n              | term MENOS term\n    \n    term : fact\n         | fact MULT fact\n         | fact DIV fact\n    \n    fact : varcte \n         | varcte PARIZQ hyper_exp PARDER fact\n    \n    varcte : CTEINT\n           | CTEFLOAT\n           | ID\n    \n    hyper_exp : super_exp\n              | super_exp AND super_exp\n              | super_exp OR super_exp\n    \n    super_exp : expresion\n              | expresion MAYORQUE expresion\n              | expresion MENORQUE expresion\n              | expresion EQUALS expresion\n              | expresion DIFERENTE expresion\n    \n    empty : \n    '
    
_lr_action_items = {'program':([0,],[2,]),'$end':([1,16,19,39,46,70,71,],[0,-2,-1,-15,-14,-16,-17,]),'ID':([2,12,13,14,15,18,28,40,49,50,51,52,53,54,55,56,64,70,71,74,75,77,78,79,81,84,87,106,108,109,110,111,112,114,122,123,124,125,126,127,128,129,137,138,139,141,148,153,154,],[3,20,-20,-21,-22,23,35,57,57,-27,-28,-29,-30,-31,-32,-33,23,-16,-17,85,85,85,85,85,100,85,-44,85,85,85,85,85,85,85,-34,85,85,85,85,85,85,-43,-38,-45,-47,-49,85,-46,-48,]),'PYC':([3,22,23,41,63,65,82,83,85,88,89,90,91,92,101,102,103,104,115,121,131,132,133,134,142,143,144,145,146,147,152,],[4,26,-9,-69,-10,-13,-12,-69,-60,-50,-53,-56,-58,-59,-11,122,-61,-64,137,141,-51,-52,-54,-55,-62,-63,-65,-66,-67,-68,-57,]),'func':([4,5,6,7,9,10,11,26,32,33,68,69,70,71,],[-69,-69,17,-3,17,-5,-6,-69,-7,-8,-23,-24,-16,-17,]),'int':([4,5,6,7,8,24,26,32,33,43,],[-69,13,-4,-3,13,13,-69,-7,-8,13,]),'float':([4,5,6,7,8,24,26,32,33,43,],[-69,14,-4,-3,14,14,-69,-7,-8,14,]),'string':([4,5,6,7,8,24,26,32,33,43,],[-69,15,-4,-3,15,15,-69,-7,-8,15,]),'var':([4,26,31,36,37,],[8,8,8,8,8,]),'main':([17,],[21,]),'PARIZQ':([20,21,57,58,59,60,61,62,85,90,91,92,],[24,25,74,77,78,79,80,81,-60,112,-58,-59,]),'CORIZQ':([23,57,],[27,75,]),'PARDER':([24,25,29,30,35,67,74,85,86,88,89,90,91,92,94,95,96,97,98,100,103,104,105,107,116,117,130,131,132,133,134,135,140,142,143,144,145,146,147,152,],[-69,31,36,37,-25,-26,87,-60,-69,-50,-53,-56,-58,-59,115,-69,-69,118,119,121,-61,-64,129,-42,-39,-40,-41,-51,-52,-54,-55,148,151,-62,-63,-65,-66,-67,-68,-57,]),'LLAVEIZQ':([26,31,32,33,36,37,38,44,45,118,119,150,151,],[-69,40,-7,-8,-69,-69,40,40,40,40,40,40,40,]),'CTEINT':([27,42,74,75,77,78,79,80,84,106,108,109,110,111,112,114,120,123,124,125,126,127,128,148,],[34,66,91,91,91,91,91,99,91,91,91,91,91,91,91,91,140,91,91,91,91,91,91,91,]),'CORDER':([34,66,85,88,89,90,91,92,93,131,132,133,134,136,152,],[41,83,-60,-50,-53,-56,-58,-59,113,-51,-52,-54,-55,149,-57,]),'COMA':([34,35,41,83,85,86,88,89,90,91,92,93,95,96,131,132,133,134,152,],[42,43,64,64,-60,106,-50,-53,-56,-58,-59,114,106,106,-51,-52,-54,-55,-57,]),'LLAVEDER':([40,47,48,49,50,51,52,53,54,55,56,70,71,72,87,122,129,137,138,139,141,153,154,],[-69,70,71,-19,-27,-28,-29,-30,-31,-32,-33,-16,-17,-18,-44,-34,-43,-38,-45,-47,-49,-46,-48,]),'print':([40,49,50,51,52,53,54,55,56,70,71,87,122,129,137,138,139,141,153,154,],[58,58,-27,-28,-29,-30,-31,-32,-33,-16,-17,-44,-34,-43,-38,-45,-47,-49,-46,-48,]),'if':([40,49,50,51,52,53,54,55,56,70,71,87,122,129,137,138,139,141,153,154,],[59,59,-27,-28,-29,-30,-31,-32,-33,-16,-17,-44,-34,-43,-38,-45,-47,-49,-46,-48,]),'while':([40,49,50,51,52,53,54,55,56,70,71,87,122,129,137,138,139,141,153,154,],[60,60,-27,-28,-29,-30,-31,-32,-33,-16,-17,-44,-34,-43,-38,-45,-47,-49,-46,-48,]),'for':([40,49,50,51,52,53,54,55,56,70,71,87,122,129,137,138,139,141,153,154,],[61,61,-27,-28,-29,-30,-31,-32,-33,-16,-17,-44,-34,-43,-38,-45,-47,-49,-46,-48,]),'input':([40,49,50,51,52,53,54,55,56,70,71,87,122,129,137,138,139,141,153,154,],[62,62,-27,-28,-29,-30,-31,-32,-33,-16,-17,-44,-34,-43,-38,-45,-47,-49,-46,-48,]),'ASIGNA':([57,73,76,113,149,],[-69,84,-37,-35,-36,]),'else':([70,71,138,],[-16,-17,150,]),'CTEFLOAT':([74,75,77,78,79,84,106,108,109,110,111,112,114,123,124,125,126,127,128,148,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'CTESTRING':([77,],[96,]),'MULT':([85,89,90,91,92,152,],[-60,110,-56,-58,-59,-57,]),'DIV':([85,89,90,91,92,152,],[-60,111,-56,-58,-59,-57,]),'MAS':([85,88,89,90,91,92,133,134,152,],[-60,108,-53,-56,-58,-59,-54,-55,-57,]),'MENOS':([85,88,89,90,91,92,133,134,152,],[-60,109,-53,-56,-58,-59,-54,-55,-57,]),'MAYORQUE':([85,88,89,90,91,92,104,131,132,133,134,152,],[-60,-50,-53,-56,-58,-59,125,-51,-52,-54,-55,-57,]),'MENORQUE':([85,88,89,90,91,92,104,131,132,133,134,152,],[-60,-50,-53,-56,-58,-59,126,-51,-52,-54,-55,-57,]),'EQUALS':([85,88,89,90,91,92,104,131,132,133,134,152,],[-60,-50,-53,-56,-58,-59,127,-51,-52,-54,-55,-57,]),'DIFERENTE':([85,88,89,90,91,92,104,131,132,133,134,152,],[-60,-50,-53,-56,-58,-59,128,-51,-52,-54,-55,-57,]),'AND':([85,88,89,90,91,92,103,104,131,132,133,134,144,145,146,147,152,],[-60,-50,-53,-56,-58,-59,123,-64,-51,-52,-54,-55,-65,-66,-67,-68,-57,]),'OR':([85,88,89,90,91,92,103,104,131,132,133,134,144,145,146,147,152,],[-60,-50,-53,-56,-58,-59,124,-64,-51,-52,-54,-55,-65,-66,-67,-68,-57,]),'DOSPUNTOS':([99,],[120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'paux':([4,],[5,]),'empty':([4,5,24,26,31,36,37,40,41,57,83,86,95,96,],[6,11,30,33,33,33,33,48,65,76,65,107,107,107,]),'vars':([4,26,31,36,37,],[7,32,38,44,45,]),'paux2':([5,],[9,]),'function':([5,],[10,]),'type':([5,8,24,43,],[12,18,28,28,]),'mainfunction':([6,9,],[16,19,]),'vaux':([18,64,],[22,82,]),'funcaux':([24,43,],[29,67,]),'bloque':([31,38,44,45,118,119,150,151,],[39,46,68,69,138,139,153,154,]),'bloqueaux':([40,49,],[47,72,]),'estatuto':([40,49,],[49,49,]),'asignacion':([40,49,],[50,50,]),'escritura':([40,49,],[51,51,]),'llamada':([40,49,],[52,52,]),'condicion':([40,49,],[53,53,]),'whileloop':([40,49,],[54,54,]),'forloop':([40,49,],[55,55,]),'lectura':([40,49,],[56,56,]),'nextvar':([41,83,],[63,101,]),'asignaux':([57,],[73,]),'expresion':([74,75,77,78,79,84,106,112,114,123,124,125,126,127,128,],[86,93,95,97,98,104,130,104,136,104,104,144,145,146,147,]),'term':([74,75,77,78,79,84,106,108,109,112,114,123,124,125,126,127,128,],[88,88,88,88,88,88,88,131,132,88,88,88,88,88,88,88,88,]),'fact':([74,75,77,78,79,84,106,108,109,110,111,112,114,123,124,125,126,127,128,148,],[89,89,89,89,89,89,89,89,89,133,134,89,89,89,89,89,89,89,89,152,]),'varcte':([74,75,77,78,79,84,106,108,109,110,111,112,114,123,124,125,126,127,128,148,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'escaux':([77,],[94,]),'hyper_exp':([84,112,],[102,135,]),'super_exp':([84,112,123,124,],[103,103,142,143,]),'nextexp':([86,95,96,],[105,116,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> program ID PYC paux paux2 mainfunction','programa',6,'p_programa','amrlang.py',110),
  ('programa -> program ID PYC empty mainfunction','programa',5,'p_programa_vacio','amrlang.py',115),
  ('paux -> vars','paux',1,'p_paux','amrlang.py',120),
  ('paux -> empty','paux',1,'p_paux','amrlang.py',121),
  ('paux2 -> function','paux2',1,'p_paux2','amrlang.py',126),
  ('paux2 -> empty','paux2',1,'p_paux2','amrlang.py',127),
  ('vars -> var type vaux PYC vars','vars',5,'p_vars','amrlang.py',132),
  ('vars -> empty','vars',1,'p_vars','amrlang.py',133),
  ('vaux -> ID','vaux',1,'p_vaux','amrlang.py',138),
  ('vaux -> ID CORIZQ CTEINT CORDER nextvar','vaux',5,'p_vaux','amrlang.py',139),
  ('vaux -> ID CORIZQ CTEINT COMA CTEINT CORDER nextvar','vaux',7,'p_vaux','amrlang.py',140),
  ('nextvar -> COMA vaux','nextvar',2,'p_nextvar','amrlang.py',145),
  ('nextvar -> empty','nextvar',1,'p_nextvar','amrlang.py',146),
  ('mainfunction -> func main PARIZQ PARDER vars bloque','mainfunction',6,'p_mainfunction','amrlang.py',151),
  ('mainfunction -> func main PARIZQ PARDER bloque','mainfunction',5,'p_mainfunction','amrlang.py',152),
  ('bloque -> LLAVEIZQ bloqueaux LLAVEDER','bloque',3,'p_bloque','amrlang.py',157),
  ('bloque -> LLAVEIZQ empty LLAVEDER','bloque',3,'p_bloque','amrlang.py',158),
  ('bloqueaux -> estatuto bloqueaux','bloqueaux',2,'p_bloqueaux','amrlang.py',163),
  ('bloqueaux -> estatuto','bloqueaux',1,'p_bloqueaux','amrlang.py',164),
  ('type -> int','type',1,'p_type','amrlang.py',169),
  ('type -> float','type',1,'p_type','amrlang.py',170),
  ('type -> string','type',1,'p_type','amrlang.py',171),
  ('function -> type ID PARIZQ funcaux PARDER vars bloque','function',7,'p_function','amrlang.py',176),
  ('function -> type ID PARIZQ empty PARDER vars bloque','function',7,'p_function','amrlang.py',177),
  ('funcaux -> type ID','funcaux',2,'p_funcaux','amrlang.py',182),
  ('funcaux -> type ID COMA funcaux','funcaux',4,'p_funcaux','amrlang.py',183),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','amrlang.py',188),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','amrlang.py',189),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','amrlang.py',190),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','amrlang.py',191),
  ('estatuto -> whileloop','estatuto',1,'p_estatuto','amrlang.py',192),
  ('estatuto -> forloop','estatuto',1,'p_estatuto','amrlang.py',193),
  ('estatuto -> lectura','estatuto',1,'p_estatuto','amrlang.py',194),
  ('asignacion -> ID asignaux ASIGNA hyper_exp PYC','asignacion',5,'p_asignacion','amrlang.py',199),
  ('asignaux -> CORIZQ expresion CORDER','asignaux',3,'p_asignaux','amrlang.py',204),
  ('asignaux -> CORIZQ expresion COMA expresion CORDER','asignaux',5,'p_asignaux','amrlang.py',205),
  ('asignaux -> empty','asignaux',1,'p_asignaux','amrlang.py',206),
  ('escritura -> print PARIZQ escaux PARDER PYC','escritura',5,'p_escritura','amrlang.py',211),
  ('escaux -> expresion nextexp','escaux',2,'p_escaux','amrlang.py',216),
  ('escaux -> CTESTRING nextexp','escaux',2,'p_escaux','amrlang.py',217),
  ('nextexp -> COMA expresion','nextexp',2,'p_nextexp','amrlang.py',223),
  ('nextexp -> empty','nextexp',1,'p_nextexp','amrlang.py',224),
  ('llamada -> ID PARIZQ expresion nextexp PARDER','llamada',5,'p_llamada','amrlang.py',229),
  ('llamada -> ID PARIZQ PARDER','llamada',3,'p_llamada','amrlang.py',230),
  ('condicion -> if PARIZQ expresion PARDER bloque','condicion',5,'p_condicion','amrlang.py',235),
  ('condicion -> if PARIZQ expresion PARDER bloque else bloque','condicion',7,'p_condicion','amrlang.py',236),
  ('whileloop -> while PARIZQ expresion PARDER bloque','whileloop',5,'p_whileloop','amrlang.py',241),
  ('forloop -> for PARIZQ CTEINT DOSPUNTOS CTEINT PARDER bloque','forloop',7,'p_forloop','amrlang.py',246),
  ('lectura -> input PARIZQ ID PARDER PYC','lectura',5,'p_lectura','amrlang.py',251),
  ('expresion -> term','expresion',1,'p_expresion','amrlang.py',256),
  ('expresion -> term MAS term','expresion',3,'p_expresion','amrlang.py',257),
  ('expresion -> term MENOS term','expresion',3,'p_expresion','amrlang.py',258),
  ('term -> fact','term',1,'p_term','amrlang.py',263),
  ('term -> fact MULT fact','term',3,'p_term','amrlang.py',264),
  ('term -> fact DIV fact','term',3,'p_term','amrlang.py',265),
  ('fact -> varcte','fact',1,'p_fact','amrlang.py',270),
  ('fact -> varcte PARIZQ hyper_exp PARDER fact','fact',5,'p_fact','amrlang.py',271),
  ('varcte -> CTEINT','varcte',1,'p_varcte','amrlang.py',276),
  ('varcte -> CTEFLOAT','varcte',1,'p_varcte','amrlang.py',277),
  ('varcte -> ID','varcte',1,'p_varcte','amrlang.py',278),
  ('hyper_exp -> super_exp','hyper_exp',1,'p_hyper_exp','amrlang.py',283),
  ('hyper_exp -> super_exp AND super_exp','hyper_exp',3,'p_hyper_exp','amrlang.py',284),
  ('hyper_exp -> super_exp OR super_exp','hyper_exp',3,'p_hyper_exp','amrlang.py',285),
  ('super_exp -> expresion','super_exp',1,'p_super_exp','amrlang.py',290),
  ('super_exp -> expresion MAYORQUE expresion','super_exp',3,'p_super_exp','amrlang.py',291),
  ('super_exp -> expresion MENORQUE expresion','super_exp',3,'p_super_exp','amrlang.py',292),
  ('super_exp -> expresion EQUALS expresion','super_exp',3,'p_super_exp','amrlang.py',293),
  ('super_exp -> expresion DIFERENTE expresion','super_exp',3,'p_super_exp','amrlang.py',294),
  ('empty -> <empty>','empty',0,'p_empty','amrlang.py',406),
]
